// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.20.3
// source: proto/tradeapi/v1/orders.proto

package tradeapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Order placement properties.
// Поведение заявки при выставлении в стакан.
type OrderProperty int32

const (
	// Value is not specified. Do not use.
	// Значение не указано. Не использовать.
	OrderProperty_ORDER_PROPERTY_UNSPECIFIED OrderProperty = 0
	// The residual of partially matched order is to stay in OrderBook.
	// Неисполненная часть заявки помещается в очередь заявок биржи.
	OrderProperty_ORDER_PROPERTY_PUT_IN_QUEUE OrderProperty = 1
	// The residual of partially matched order is to be cancelled.
	// Неисполненная часть заявки снимается с торгов.
	OrderProperty_ORDER_PROPERTY_CANCEL_BALANCE OrderProperty = 2
	// Filling the order only in case the posibility of immediate and full execution.
	// Сделки совершаются только в том случае, если заявка может быть удовлетворена полностью и сразу при выставлении.
	OrderProperty_ORDER_PROPERTY_IMM_OR_CANCEL OrderProperty = 3
)

// Enum value maps for OrderProperty.
var (
	OrderProperty_name = map[int32]string{
		0: "ORDER_PROPERTY_UNSPECIFIED",
		1: "ORDER_PROPERTY_PUT_IN_QUEUE",
		2: "ORDER_PROPERTY_CANCEL_BALANCE",
		3: "ORDER_PROPERTY_IMM_OR_CANCEL",
	}
	OrderProperty_value = map[string]int32{
		"ORDER_PROPERTY_UNSPECIFIED":    0,
		"ORDER_PROPERTY_PUT_IN_QUEUE":   1,
		"ORDER_PROPERTY_CANCEL_BALANCE": 2,
		"ORDER_PROPERTY_IMM_OR_CANCEL":  3,
	}
)

func (x OrderProperty) Enum() *OrderProperty {
	p := new(OrderProperty)
	*p = x
	return p
}

func (x OrderProperty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderProperty) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tradeapi_v1_orders_proto_enumTypes[0].Descriptor()
}

func (OrderProperty) Type() protoreflect.EnumType {
	return &file_proto_tradeapi_v1_orders_proto_enumTypes[0]
}

func (x OrderProperty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderProperty.Descriptor instead.
func (OrderProperty) EnumDescriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_orders_proto_rawDescGZIP(), []int{0}
}

// Conditional order types.
// Типы условных ордеров.
type OrderConditionType int32

const (
	// Value is not specified. Do not use.
	// Значение не указано. Не использовать.
	OrderConditionType_ORDER_CONDITION_TYPE_UNSPECIFIED OrderConditionType = 0
	// Best Bid.
	// Лучшая цена покупки.
	OrderConditionType_ORDER_CONDITION_TYPE_BID OrderConditionType = 1
	// Best Bid or Last trade price and higher.
	// Лучшая цена покупки или сделка по заданной цене и выше.
	OrderConditionType_ORDER_CONDITION_TYPE_BID_OR_LAST OrderConditionType = 2
	// Best Ask.
	// Лучшая цена продажи.
	OrderConditionType_ORDER_CONDITION_TYPE_ASK OrderConditionType = 3
	// Best Ask or Last trade price and lower.
	// Лучшая цена продажи или сделка по заданной цене и ниже.
	OrderConditionType_ORDER_CONDITION_TYPE_ASK_OR_LAST OrderConditionType = 4
	// Placement time. Parameter OrderCondition.time must be set.
	// Время выставления заявки на Биржу. Параметр OrderCondition.time должен быть установлен.
	OrderConditionType_ORDER_CONDITION_TYPE_TIME OrderConditionType = 5
	// Coverage below specified.
	// Обеспеченность ниже заданной.
	OrderConditionType_ORDER_CONDITION_TYPE_COV_DOWN OrderConditionType = 6
	// Coverage above specified.
	// Обеспеченность выше заданной.
	OrderConditionType_ORDER_CONDITION_TYPE_COV_UP OrderConditionType = 7
	// Last trade price and higher.
	// Сделка на рынке по заданной цене или выше.
	OrderConditionType_ORDER_CONDITION_TYPE_LAST_UP OrderConditionType = 8
	// Last trade price and lower.
	// Сделка на рынке по заданной цене или ниже.
	OrderConditionType_ORDER_CONDITION_TYPE_LAST_DOWN OrderConditionType = 9
)

// Enum value maps for OrderConditionType.
var (
	OrderConditionType_name = map[int32]string{
		0: "ORDER_CONDITION_TYPE_UNSPECIFIED",
		1: "ORDER_CONDITION_TYPE_BID",
		2: "ORDER_CONDITION_TYPE_BID_OR_LAST",
		3: "ORDER_CONDITION_TYPE_ASK",
		4: "ORDER_CONDITION_TYPE_ASK_OR_LAST",
		5: "ORDER_CONDITION_TYPE_TIME",
		6: "ORDER_CONDITION_TYPE_COV_DOWN",
		7: "ORDER_CONDITION_TYPE_COV_UP",
		8: "ORDER_CONDITION_TYPE_LAST_UP",
		9: "ORDER_CONDITION_TYPE_LAST_DOWN",
	}
	OrderConditionType_value = map[string]int32{
		"ORDER_CONDITION_TYPE_UNSPECIFIED": 0,
		"ORDER_CONDITION_TYPE_BID":         1,
		"ORDER_CONDITION_TYPE_BID_OR_LAST": 2,
		"ORDER_CONDITION_TYPE_ASK":         3,
		"ORDER_CONDITION_TYPE_ASK_OR_LAST": 4,
		"ORDER_CONDITION_TYPE_TIME":        5,
		"ORDER_CONDITION_TYPE_COV_DOWN":    6,
		"ORDER_CONDITION_TYPE_COV_UP":      7,
		"ORDER_CONDITION_TYPE_LAST_UP":     8,
		"ORDER_CONDITION_TYPE_LAST_DOWN":   9,
	}
)

func (x OrderConditionType) Enum() *OrderConditionType {
	p := new(OrderConditionType)
	*p = x
	return p
}

func (x OrderConditionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderConditionType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tradeapi_v1_orders_proto_enumTypes[1].Descriptor()
}

func (OrderConditionType) Type() protoreflect.EnumType {
	return &file_proto_tradeapi_v1_orders_proto_enumTypes[1]
}

func (x OrderConditionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderConditionType.Descriptor instead.
func (OrderConditionType) EnumDescriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_orders_proto_rawDescGZIP(), []int{1}
}

// Order status.
// Состояние заявки.
type OrderStatus int32

const (
	// Value is not specified. Do not use.
	// Значение не указано. Не использовать.
	OrderStatus_ORDER_STATUS_UNSPECIFIED OrderStatus = 0
	// Order is not in OrderBook.
	// Заявка не выставлена.
	OrderStatus_ORDER_STATUS_NONE OrderStatus = 1
	// Order is in OrderBook.
	// Заявка выставлена.
	OrderStatus_ORDER_STATUS_ACTIVE OrderStatus = 2
	// Order is canceled.
	// Заявка отменена.
	OrderStatus_ORDER_STATUS_CANCELLED OrderStatus = 3
	// Order is matched.
	// Заявка исполнена.
	OrderStatus_ORDER_STATUS_MATCHED OrderStatus = 4
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0: "ORDER_STATUS_UNSPECIFIED",
		1: "ORDER_STATUS_NONE",
		2: "ORDER_STATUS_ACTIVE",
		3: "ORDER_STATUS_CANCELLED",
		4: "ORDER_STATUS_MATCHED",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_STATUS_UNSPECIFIED": 0,
		"ORDER_STATUS_NONE":        1,
		"ORDER_STATUS_ACTIVE":      2,
		"ORDER_STATUS_CANCELLED":   3,
		"ORDER_STATUS_MATCHED":     4,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tradeapi_v1_orders_proto_enumTypes[2].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_proto_tradeapi_v1_orders_proto_enumTypes[2]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_orders_proto_rawDescGZIP(), []int{2}
}

// Order placement properties.
// Свойства выставления заявок.
type OrderCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Condition type.
	// Тип условия.
	Type OrderConditionType `protobuf:"varint,1,opt,name=type,proto3,enum=proto.tradeapi.v1.OrderConditionType" json:"type,omitempty"`
	// Conditional value.
	// Значение для условия.
	Price float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	// Placement time.
	// Время выставления.
	Time *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *OrderCondition) Reset() {
	*x = OrderCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCondition) ProtoMessage() {}

func (x *OrderCondition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCondition.ProtoReflect.Descriptor instead.
func (*OrderCondition) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_orders_proto_rawDescGZIP(), []int{0}
}

func (x *OrderCondition) GetType() OrderConditionType {
	if x != nil {
		return x.Type
	}
	return OrderConditionType_ORDER_CONDITION_TYPE_UNSPECIFIED
}

func (x *OrderCondition) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderCondition) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

// New Order Request.
// Запрос на создание заявки.
type NewOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Trading Board.
	// Режим торгов.
	SecurityBoard string `protobuf:"bytes,2,opt,name=security_board,json=securityBoard,proto3" json:"security_board,omitempty"`
	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,3,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Transaction direction.
	// Направление сделки.
	BuySell BuySell `protobuf:"varint,4,opt,name=buy_sell,json=buySell,proto3,enum=proto.tradeapi.v1.BuySell" json:"buy_sell,omitempty"`
	// Order volume in lots.
	// Количество лотов инструмента для заявки.
	Quantity int32 `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Use credit. Not available in derivative market.
	// Использовать кредит. Недоступно для срочного рынка.
	UseCredit bool `protobuf:"varint,6,opt,name=use_credit,json=useCredit,proto3" json:"use_credit,omitempty"`
	// Order price. Use "null" to place Market Order.
	// Цена заявки. Используйте "null", чтобы выставить рыночную заявку.
	Price *wrapperspb.DoubleValue `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`
	// Unfilled order execution property.
	// Свойства исполнения частично исполненных заявок.
	Property OrderProperty `protobuf:"varint,8,opt,name=property,proto3,enum=proto.tradeapi.v1.OrderProperty" json:"property,omitempty"`
	// Order placement properties.
	// Свойства выставления заявок.
	Condition *OrderCondition `protobuf:"bytes,9,opt,name=condition,proto3" json:"condition,omitempty"`
	// Order lifetime condition.
	// Условие по времени действия заявки.
	ValidBefore *OrderValidBefore `protobuf:"bytes,10,opt,name=valid_before,json=validBefore,proto3" json:"valid_before,omitempty"`
}

func (x *NewOrderRequest) Reset() {
	*x = NewOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrderRequest) ProtoMessage() {}

func (x *NewOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrderRequest.ProtoReflect.Descriptor instead.
func (*NewOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_orders_proto_rawDescGZIP(), []int{1}
}

func (x *NewOrderRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *NewOrderRequest) GetSecurityBoard() string {
	if x != nil {
		return x.SecurityBoard
	}
	return ""
}

func (x *NewOrderRequest) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *NewOrderRequest) GetBuySell() BuySell {
	if x != nil {
		return x.BuySell
	}
	return BuySell_BUY_SELL_UNSPECIFIED
}

func (x *NewOrderRequest) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *NewOrderRequest) GetUseCredit() bool {
	if x != nil {
		return x.UseCredit
	}
	return false
}

func (x *NewOrderRequest) GetPrice() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *NewOrderRequest) GetProperty() OrderProperty {
	if x != nil {
		return x.Property
	}
	return OrderProperty_ORDER_PROPERTY_UNSPECIFIED
}

func (x *NewOrderRequest) GetCondition() *OrderCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *NewOrderRequest) GetValidBefore() *OrderValidBefore {
	if x != nil {
		return x.ValidBefore
	}
	return nil
}

// NewOrderRequest result.
// Результат выполнения NewOrderRequest.
type NewOrderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account Id.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Transaction Id, which can be used to cancel order or find corresponding order_no in Event service.
	// Идентификатор транзакции, который может быть использован для отмены заявки или определения номера заявки в сервисе событий.
	TransactionId int32 `protobuf:"varint,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,3,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
}

func (x *NewOrderResult) Reset() {
	*x = NewOrderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewOrderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrderResult) ProtoMessage() {}

func (x *NewOrderResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrderResult.ProtoReflect.Descriptor instead.
func (*NewOrderResult) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_orders_proto_rawDescGZIP(), []int{2}
}

func (x *NewOrderResult) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *NewOrderResult) GetTransactionId() int32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *NewOrderResult) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

// Cancel Order Request.
// Запрос на отмену заявки.
type CancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account Id.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Transaction Id, which can be used to cancel order or find corresponding order_no in Event service.
	// Идентификатор транзакции, который может быть использован для отмены заявки или определения номера заявки в сервисе событий.
	TransactionId int32 `protobuf:"varint,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_orders_proto_rawDescGZIP(), []int{3}
}

func (x *CancelOrderRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CancelOrderRequest) GetTransactionId() int32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

// CancelOrderRequest result.
// Результат выполнения CancelOrderRequest.
type CancelOrderResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account Id.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Transaction Id, which can be used to cancel order or find corresponding order_no in Event service.
	// Идентификатор транзакции, который может быть использован для отмены заявки или определения номера заявки в сервисе событий.
	TransactionId int32 `protobuf:"varint,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *CancelOrderResult) Reset() {
	*x = CancelOrderResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderResult) ProtoMessage() {}

func (x *CancelOrderResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderResult.ProtoReflect.Descriptor instead.
func (*CancelOrderResult) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_orders_proto_rawDescGZIP(), []int{4}
}

func (x *CancelOrderResult) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CancelOrderResult) GetTransactionId() int32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

// Get Orders Request.
// Запрос списка заявок.
type GetOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Include executed orders in response.
	// Вернуть исполненные заявки.
	IncludeMatched bool `protobuf:"varint,2,opt,name=include_matched,json=includeMatched,proto3" json:"include_matched,omitempty"`
	// Include canceled orders in response.
	// Вернуть отмененные заявки.
	IncludeCanceled bool `protobuf:"varint,3,opt,name=include_canceled,json=includeCanceled,proto3" json:"include_canceled,omitempty"`
	// Include active orders in response.
	// Вернуть активные заявки.
	IncludeActive bool `protobuf:"varint,4,opt,name=include_active,json=includeActive,proto3" json:"include_active,omitempty"`
}

func (x *GetOrdersRequest) Reset() {
	*x = GetOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersRequest) ProtoMessage() {}

func (x *GetOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetOrdersRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_orders_proto_rawDescGZIP(), []int{5}
}

func (x *GetOrdersRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetOrdersRequest) GetIncludeMatched() bool {
	if x != nil {
		return x.IncludeMatched
	}
	return false
}

func (x *GetOrdersRequest) GetIncludeCanceled() bool {
	if x != nil {
		return x.IncludeCanceled
	}
	return false
}

func (x *GetOrdersRequest) GetIncludeActive() bool {
	if x != nil {
		return x.IncludeActive
	}
	return false
}

// Order.
// Заявка.
type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order No. Appear only when an order is placed in OrderBook.
	// Биржевой номер заявки. Появляется после того, как заявка попадает в стакан.
	OrderNo int64 `protobuf:"varint,1,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	// Transaction Id . Assigned when a command for new order creation is sent.
	// Идентификатор транзакции. Назначается после подачи команды на создание новой заявки.
	TransactionId int32 `protobuf:"varint,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,3,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Order status.
	// Состояние заявки.
	Status OrderStatus `protobuf:"varint,5,opt,name=status,proto3,enum=proto.tradeapi.v1.OrderStatus" json:"status,omitempty"`
	// Transaction direction.
	// Направление сделки.
	BuySell BuySell `protobuf:"varint,6,opt,name=buy_sell,json=buySell,proto3,enum=proto.tradeapi.v1.BuySell" json:"buy_sell,omitempty"`
	// Time of Order placement in UTC.
	// Время регистрации заявки на бирже. В UTC.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Lot price.
	// Цена за лот.
	Price float64 `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	// Volume in lots.
	// Количество, в лотах.
	Quantity int32 `protobuf:"varint,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Residual volume in lots.
	// Неисполненный остаток, в лотах.
	Balance int32 `protobuf:"varint,10,opt,name=balance,proto3" json:"balance,omitempty"`
	// Rejection reason or conditional order resolution.
	// Причина отказа или вердикт по условной заявке.
	Message string `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	// Price currency.
	// Валюта цены.
	Currency string `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	// Conditional order properties.
	// Параметры условной заявки.
	Condition *OrderCondition `protobuf:"bytes,13,opt,name=condition,proto3" json:"condition,omitempty"`
	// Order lifetime.
	// Время действия заявки.
	ValidBefore *OrderValidBefore `protobuf:"bytes,14,opt,name=valid_before,json=validBefore,proto3" json:"valid_before,omitempty"`
	// Time of order registration on the server in UTC.
	// Время, когда заявка была зарегистрирована на сервере. В UTC.
	AcceptedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=accepted_at,json=acceptedAt,proto3" json:"accepted_at,omitempty"`
	// Security Board.
	// Основной режим торгов инструмента.
	SecurityBoard string `protobuf:"bytes,16,opt,name=security_board,json=securityBoard,proto3" json:"security_board,omitempty"`
	// Market.
	// Рынок.
	Market Market `protobuf:"varint,17,opt,name=market,proto3,enum=proto.tradeapi.v1.Market" json:"market,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_orders_proto_rawDescGZIP(), []int{6}
}

func (x *Order) GetOrderNo() int64 {
	if x != nil {
		return x.OrderNo
	}
	return 0
}

func (x *Order) GetTransactionId() int32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *Order) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *Order) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Order) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (x *Order) GetBuySell() BuySell {
	if x != nil {
		return x.BuySell
	}
	return BuySell_BUY_SELL_UNSPECIFIED
}

func (x *Order) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Order) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Order) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *Order) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Order) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Order) GetCondition() *OrderCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Order) GetValidBefore() *OrderValidBefore {
	if x != nil {
		return x.ValidBefore
	}
	return nil
}

func (x *Order) GetAcceptedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AcceptedAt
	}
	return nil
}

func (x *Order) GetSecurityBoard() string {
	if x != nil {
		return x.SecurityBoard
	}
	return ""
}

func (x *Order) GetMarket() Market {
	if x != nil {
		return x.Market
	}
	return Market_MARKET_UNSPECIFIED
}

// GetOrdersRequest result.
// Результат GetOrdersRequest.
type GetOrdersResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Orders list.
	// Список заявок.
	Orders []*Order `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *GetOrdersResult) Reset() {
	*x = GetOrdersResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersResult) ProtoMessage() {}

func (x *GetOrdersResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_orders_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersResult.ProtoReflect.Descriptor instead.
func (*GetOrdersResult) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_orders_proto_rawDescGZIP(), []int{7}
}

func (x *GetOrdersResult) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetOrdersResult) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

var File_proto_tradeapi_v1_orders_proto protoreflect.FileDescriptor

var file_proto_tradeapi_v1_orders_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xe7, 0x03, 0x0a, 0x0f, 0x4e, 0x65, 0x77,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x79, 0x53,
	0x65, 0x6c, 0x6c, 0x52, 0x07, 0x62, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x22, 0x79, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x58, 0x0a,
	0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0xaa, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xd7, 0x05,
	0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c,
	0x6c, 0x52, 0x07, 0x62, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42,
	0x6f, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2a, 0x95, 0x01, 0x0a, 0x0d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x50, 0x55,
	0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54, 0x59, 0x5f, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x45, 0x52, 0x54,
	0x59, 0x5f, 0x49, 0x4d, 0x4d, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10,
	0x03, 0x2a, 0xeb, 0x02, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x4b, 0x10, 0x03,
	0x12, 0x24, 0x0a, 0x20, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x4f, 0x52, 0x5f,
	0x4c, 0x41, 0x53, 0x54, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f,
	0x56, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x4f, 0x56, 0x5f, 0x55, 0x50, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x55, 0x50, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x09, 0x2a,
	0x91, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45,
	0x44, 0x10, 0x04, 0x42, 0x4a, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x65, 0x76, 0x73, 0x61, 0x6d, 0x73, 0x6f, 0x6e, 0x6f, 0x76, 0x2f, 0x46, 0x69, 0x6e,
	0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6d, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_tradeapi_v1_orders_proto_rawDescOnce sync.Once
	file_proto_tradeapi_v1_orders_proto_rawDescData = file_proto_tradeapi_v1_orders_proto_rawDesc
)

func file_proto_tradeapi_v1_orders_proto_rawDescGZIP() []byte {
	file_proto_tradeapi_v1_orders_proto_rawDescOnce.Do(func() {
		file_proto_tradeapi_v1_orders_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tradeapi_v1_orders_proto_rawDescData)
	})
	return file_proto_tradeapi_v1_orders_proto_rawDescData
}

var file_proto_tradeapi_v1_orders_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_tradeapi_v1_orders_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_tradeapi_v1_orders_proto_goTypes = []interface{}{
	(OrderProperty)(0),             // 0: proto.tradeapi.v1.OrderProperty
	(OrderConditionType)(0),        // 1: proto.tradeapi.v1.OrderConditionType
	(OrderStatus)(0),               // 2: proto.tradeapi.v1.OrderStatus
	(*OrderCondition)(nil),         // 3: proto.tradeapi.v1.OrderCondition
	(*NewOrderRequest)(nil),        // 4: proto.tradeapi.v1.NewOrderRequest
	(*NewOrderResult)(nil),         // 5: proto.tradeapi.v1.NewOrderResult
	(*CancelOrderRequest)(nil),     // 6: proto.tradeapi.v1.CancelOrderRequest
	(*CancelOrderResult)(nil),      // 7: proto.tradeapi.v1.CancelOrderResult
	(*GetOrdersRequest)(nil),       // 8: proto.tradeapi.v1.GetOrdersRequest
	(*Order)(nil),                  // 9: proto.tradeapi.v1.Order
	(*GetOrdersResult)(nil),        // 10: proto.tradeapi.v1.GetOrdersResult
	(*timestamppb.Timestamp)(nil),  // 11: google.protobuf.Timestamp
	(BuySell)(0),                   // 12: proto.tradeapi.v1.BuySell
	(*wrapperspb.DoubleValue)(nil), // 13: google.protobuf.DoubleValue
	(*OrderValidBefore)(nil),       // 14: proto.tradeapi.v1.OrderValidBefore
	(Market)(0),                    // 15: proto.tradeapi.v1.Market
}
var file_proto_tradeapi_v1_orders_proto_depIdxs = []int32{
	1,  // 0: proto.tradeapi.v1.OrderCondition.type:type_name -> proto.tradeapi.v1.OrderConditionType
	11, // 1: proto.tradeapi.v1.OrderCondition.time:type_name -> google.protobuf.Timestamp
	12, // 2: proto.tradeapi.v1.NewOrderRequest.buy_sell:type_name -> proto.tradeapi.v1.BuySell
	13, // 3: proto.tradeapi.v1.NewOrderRequest.price:type_name -> google.protobuf.DoubleValue
	0,  // 4: proto.tradeapi.v1.NewOrderRequest.property:type_name -> proto.tradeapi.v1.OrderProperty
	3,  // 5: proto.tradeapi.v1.NewOrderRequest.condition:type_name -> proto.tradeapi.v1.OrderCondition
	14, // 6: proto.tradeapi.v1.NewOrderRequest.valid_before:type_name -> proto.tradeapi.v1.OrderValidBefore
	2,  // 7: proto.tradeapi.v1.Order.status:type_name -> proto.tradeapi.v1.OrderStatus
	12, // 8: proto.tradeapi.v1.Order.buy_sell:type_name -> proto.tradeapi.v1.BuySell
	11, // 9: proto.tradeapi.v1.Order.created_at:type_name -> google.protobuf.Timestamp
	3,  // 10: proto.tradeapi.v1.Order.condition:type_name -> proto.tradeapi.v1.OrderCondition
	14, // 11: proto.tradeapi.v1.Order.valid_before:type_name -> proto.tradeapi.v1.OrderValidBefore
	11, // 12: proto.tradeapi.v1.Order.accepted_at:type_name -> google.protobuf.Timestamp
	15, // 13: proto.tradeapi.v1.Order.market:type_name -> proto.tradeapi.v1.Market
	9,  // 14: proto.tradeapi.v1.GetOrdersResult.orders:type_name -> proto.tradeapi.v1.Order
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_proto_tradeapi_v1_orders_proto_init() }
func file_proto_tradeapi_v1_orders_proto_init() {
	if File_proto_tradeapi_v1_orders_proto != nil {
		return
	}
	file_proto_tradeapi_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_tradeapi_v1_orders_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_orders_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_orders_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewOrderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_orders_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_orders_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_orders_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_orders_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_orders_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tradeapi_v1_orders_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tradeapi_v1_orders_proto_goTypes,
		DependencyIndexes: file_proto_tradeapi_v1_orders_proto_depIdxs,
		EnumInfos:         file_proto_tradeapi_v1_orders_proto_enumTypes,
		MessageInfos:      file_proto_tradeapi_v1_orders_proto_msgTypes,
	}.Build()
	File_proto_tradeapi_v1_orders_proto = out.File
	file_proto_tradeapi_v1_orders_proto_rawDesc = nil
	file_proto_tradeapi_v1_orders_proto_goTypes = nil
	file_proto_tradeapi_v1_orders_proto_depIdxs = nil
}
