// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.20.3
// source: proto/tradeapi/v1/security.proto

package tradeapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Security price sign.
// Разрешенный знак цены у инструмента.
type PriceSign int32

const (
	// Value is not specified. Do not use.
	// Значение не указано. Не использовать.
	PriceSign_PRICE_SIGN_UNSPECIFIED PriceSign = 0
	// Positive.
	// Положительная цена.
	PriceSign_PRICE_SIGN_POSITIVE PriceSign = 1
	// Non negative.
	// Не отрицательная цена.
	PriceSign_PRICE_SIGN_NON_NEGATIVE PriceSign = 2
	// Any.
	// Любая цена, без ограничения на знак.
	PriceSign_PRICE_SIGN_ANY PriceSign = 3
)

// Enum value maps for PriceSign.
var (
	PriceSign_name = map[int32]string{
		0: "PRICE_SIGN_UNSPECIFIED",
		1: "PRICE_SIGN_POSITIVE",
		2: "PRICE_SIGN_NON_NEGATIVE",
		3: "PRICE_SIGN_ANY",
	}
	PriceSign_value = map[string]int32{
		"PRICE_SIGN_UNSPECIFIED":  0,
		"PRICE_SIGN_POSITIVE":     1,
		"PRICE_SIGN_NON_NEGATIVE": 2,
		"PRICE_SIGN_ANY":          3,
	}
)

func (x PriceSign) Enum() *PriceSign {
	p := new(PriceSign)
	*p = x
	return p
}

func (x PriceSign) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PriceSign) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tradeapi_v1_security_proto_enumTypes[0].Descriptor()
}

func (PriceSign) Type() protoreflect.EnumType {
	return &file_proto_tradeapi_v1_security_proto_enumTypes[0]
}

func (x PriceSign) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PriceSign.Descriptor instead.
func (PriceSign) EnumDescriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_security_proto_rawDescGZIP(), []int{0}
}

// Security.
// Инструмент.
type Security struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Security code.
	// Код инструмента.
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Security board.
	// Основной режим торгов инструмента.
	Board string `protobuf:"bytes,2,opt,name=board,proto3" json:"board,omitempty"`
	// Market.
	// Рынок инструмента.
	Market Market `protobuf:"varint,3,opt,name=market,proto3,enum=proto.tradeapi.v1.Market" json:"market,omitempty"`
	// Number of decimal digits in the price value.
	// Количество знаков в дробной части цены.
	Decimals int32 `protobuf:"zigzag32,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// Lot size.
	// Размер лота.
	LotSize int32 `protobuf:"zigzag32,5,opt,name=lot_size,json=lotSize,proto3" json:"lot_size,omitempty"`
	// Price min step.
	// Минимальный шаг цены.
	MinStep int32 `protobuf:"zigzag32,6,opt,name=min_step,json=minStep,proto3" json:"min_step,omitempty"`
	// Currency.
	// Валюта номинала инструмента.
	Currency string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	// Instrument code.
	// Код инструмента.
	InstrumentCode string `protobuf:"bytes,8,opt,name=instrument_code,json=instrumentCode,proto3" json:"instrument_code,omitempty"`
	// Security name.
	// Название инструмента.
	ShortName string `protobuf:"bytes,9,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	// Параметры инструмента. Значение представлено в виде битовой маски.
	// 0 Нет параметров.
	// 1 Инструмент торгуется на Бирже.
	// 2 Инструмент допущен к торгам у Брокера - существенно для НЕ ГЛАВНЫХ трейдеров, главным доступны все инструменты, торгуемые на биржах.
	// 4 Рыночные заявки (без ограничения по цене) разрешены.
	// 8 Признак маржинальности бумаги.
	// 16 Опцион Call.
	// 32 Опцион Put.
	// 48 Фьючерс: Call | Put.
	// 64 Разрешен для резидентов.
	// 128 Разрешен для нерезидентов.
	Properties int32 `protobuf:"varint,10,opt,name=properties,proto3" json:"properties,omitempty"`
	// Timezone name.
	// Имя таймзоны.
	TimeZoneName string `protobuf:"bytes,11,opt,name=time_zone_name,json=timeZoneName,proto3" json:"time_zone_name,omitempty"`
	// The price unit cost for one security (not for the lot)), excluding accrued interest.
	// Стоимость пункта цены одного инструмента (не лота), без учета НКД.
	BpCost float64 `protobuf:"fixed64,12,opt,name=bp_cost,json=bpCost,proto3" json:"bp_cost,omitempty"`
	// Current accrued interest.
	// Текущий НКД.
	AccruedInterest float64 `protobuf:"fixed64,13,opt,name=accrued_interest,json=accruedInterest,proto3" json:"accrued_interest,omitempty"`
	// Allowed price: positive, non negative, any.
	// Допустимая цена: положительная, неотрицательная, любая.
	PriceSign PriceSign `protobuf:"varint,14,opt,name=price_sign,json=priceSign,proto3,enum=proto.tradeapi.v1.PriceSign" json:"price_sign,omitempty"`
	// Ticker.
	// Код инструмента (тикер) на биржевой площадке листинга.
	Ticker string `protobuf:"bytes,15,opt,name=ticker,proto3" json:"ticker,omitempty"`
	// The split ratio of a security in one standard lot.
	// Коэффициент дробления ценной бумаги в одном стандартном лоте.
	LotDivider int32 `protobuf:"zigzag32,16,opt,name=lot_divider,json=lotDivider,proto3" json:"lot_divider,omitempty"`
}

func (x *Security) Reset() {
	*x = Security{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_security_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Security) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Security) ProtoMessage() {}

func (x *Security) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_security_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Security.ProtoReflect.Descriptor instead.
func (*Security) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_security_proto_rawDescGZIP(), []int{0}
}

func (x *Security) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Security) GetBoard() string {
	if x != nil {
		return x.Board
	}
	return ""
}

func (x *Security) GetMarket() Market {
	if x != nil {
		return x.Market
	}
	return Market_MARKET_UNSPECIFIED
}

func (x *Security) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *Security) GetLotSize() int32 {
	if x != nil {
		return x.LotSize
	}
	return 0
}

func (x *Security) GetMinStep() int32 {
	if x != nil {
		return x.MinStep
	}
	return 0
}

func (x *Security) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Security) GetInstrumentCode() string {
	if x != nil {
		return x.InstrumentCode
	}
	return ""
}

func (x *Security) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *Security) GetProperties() int32 {
	if x != nil {
		return x.Properties
	}
	return 0
}

func (x *Security) GetTimeZoneName() string {
	if x != nil {
		return x.TimeZoneName
	}
	return ""
}

func (x *Security) GetBpCost() float64 {
	if x != nil {
		return x.BpCost
	}
	return 0
}

func (x *Security) GetAccruedInterest() float64 {
	if x != nil {
		return x.AccruedInterest
	}
	return 0
}

func (x *Security) GetPriceSign() PriceSign {
	if x != nil {
		return x.PriceSign
	}
	return PriceSign_PRICE_SIGN_UNSPECIFIED
}

func (x *Security) GetTicker() string {
	if x != nil {
		return x.Ticker
	}
	return ""
}

func (x *Security) GetLotDivider() int32 {
	if x != nil {
		return x.LotDivider
	}
	return 0
}

var File_proto_tradeapi_v1_security_proto protoreflect.FileDescriptor

var file_proto_tradeapi_v1_security_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x04, 0x0a, 0x08, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6c,
	0x6f, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6c,
	0x6f, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x65,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x27, 0x0a,
	0x0f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x70, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x62, 0x70,
	0x43, 0x6f, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x6c, 0x6f, 0x74, 0x44, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2a, 0x71, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x69,
	0x67, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x03, 0x42, 0x4a, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65, 0x76, 0x73, 0x61, 0x6d, 0x73, 0x6f, 0x6e, 0x6f,
	0x76, 0x2f, 0x46, 0x69, 0x6e, 0x61, 0x6d, 0x54, 0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x2f, 0x76,
	0x32, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x17, 0x46, 0x69, 0x6e,
	0x61, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_tradeapi_v1_security_proto_rawDescOnce sync.Once
	file_proto_tradeapi_v1_security_proto_rawDescData = file_proto_tradeapi_v1_security_proto_rawDesc
)

func file_proto_tradeapi_v1_security_proto_rawDescGZIP() []byte {
	file_proto_tradeapi_v1_security_proto_rawDescOnce.Do(func() {
		file_proto_tradeapi_v1_security_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tradeapi_v1_security_proto_rawDescData)
	})
	return file_proto_tradeapi_v1_security_proto_rawDescData
}

var file_proto_tradeapi_v1_security_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_tradeapi_v1_security_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_tradeapi_v1_security_proto_goTypes = []interface{}{
	(PriceSign)(0),   // 0: proto.tradeapi.v1.PriceSign
	(*Security)(nil), // 1: proto.tradeapi.v1.Security
	(Market)(0),      // 2: proto.tradeapi.v1.Market
}
var file_proto_tradeapi_v1_security_proto_depIdxs = []int32{
	2, // 0: proto.tradeapi.v1.Security.market:type_name -> proto.tradeapi.v1.Market
	0, // 1: proto.tradeapi.v1.Security.price_sign:type_name -> proto.tradeapi.v1.PriceSign
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_tradeapi_v1_security_proto_init() }
func file_proto_tradeapi_v1_security_proto_init() {
	if File_proto_tradeapi_v1_security_proto != nil {
		return
	}
	file_proto_tradeapi_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_tradeapi_v1_security_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Security); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tradeapi_v1_security_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tradeapi_v1_security_proto_goTypes,
		DependencyIndexes: file_proto_tradeapi_v1_security_proto_depIdxs,
		EnumInfos:         file_proto_tradeapi_v1_security_proto_enumTypes,
		MessageInfos:      file_proto_tradeapi_v1_security_proto_msgTypes,
	}.Build()
	File_proto_tradeapi_v1_security_proto = out.File
	file_proto_tradeapi_v1_security_proto_rawDesc = nil
	file_proto_tradeapi_v1_security_proto_goTypes = nil
	file_proto_tradeapi_v1_security_proto_depIdxs = nil
}
