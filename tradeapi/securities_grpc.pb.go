// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpc/tradeapi/v1/securities.proto

package tradeapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecuritiesClient is the client API for Securities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecuritiesClient interface {
	// Securities table.
	// Справочник инструментов.
	GetSecurities(ctx context.Context, in *GetSecuritiesRequest, opts ...grpc.CallOption) (*GetSecuritiesResult, error)
}

type securitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewSecuritiesClient(cc grpc.ClientConnInterface) SecuritiesClient {
	return &securitiesClient{cc}
}

func (c *securitiesClient) GetSecurities(ctx context.Context, in *GetSecuritiesRequest, opts ...grpc.CallOption) (*GetSecuritiesResult, error) {
	out := new(GetSecuritiesResult)
	err := c.cc.Invoke(ctx, "/grpc.tradeapi.v1.Securities/GetSecurities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecuritiesServer is the server API for Securities service.
// All implementations must embed UnimplementedSecuritiesServer
// for forward compatibility
type SecuritiesServer interface {
	// Securities table.
	// Справочник инструментов.
	GetSecurities(context.Context, *GetSecuritiesRequest) (*GetSecuritiesResult, error)
	mustEmbedUnimplementedSecuritiesServer()
}

// UnimplementedSecuritiesServer must be embedded to have forward compatible implementations.
type UnimplementedSecuritiesServer struct {
}

func (UnimplementedSecuritiesServer) GetSecurities(context.Context, *GetSecuritiesRequest) (*GetSecuritiesResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecurities not implemented")
}
func (UnimplementedSecuritiesServer) mustEmbedUnimplementedSecuritiesServer() {}

// UnsafeSecuritiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecuritiesServer will
// result in compilation errors.
type UnsafeSecuritiesServer interface {
	mustEmbedUnimplementedSecuritiesServer()
}

func RegisterSecuritiesServer(s grpc.ServiceRegistrar, srv SecuritiesServer) {
	s.RegisterService(&Securities_ServiceDesc, srv)
}

func _Securities_GetSecurities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecuritiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuritiesServer).GetSecurities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tradeapi.v1.Securities/GetSecurities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuritiesServer).GetSecurities(ctx, req.(*GetSecuritiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Securities_ServiceDesc is the grpc.ServiceDesc for Securities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Securities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.tradeapi.v1.Securities",
	HandlerType: (*SecuritiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSecurities",
			Handler:    _Securities_GetSecurities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/tradeapi/v1/securities.proto",
}
