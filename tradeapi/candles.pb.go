// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.20.3
// source: proto/tradeapi/v1/candles.proto

package tradeapi

import (
	date "google.golang.org/genproto/googleapis/type/date"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Timeframe.
// Временной интервал.
type IntradayCandleTimeFrame int32

const (
	// Value is not specified. Do not use.
	// Значение не указано. Не использовать.
	IntradayCandleTimeFrame_INTRADAYCANDLE_TIMEFRAME_UNSPECIFIED IntradayCandleTimeFrame = 0
	// 1 minute.
	// 1 минута.
	IntradayCandleTimeFrame_INTRADAYCANDLE_TIMEFRAME_M1 IntradayCandleTimeFrame = 1
	// 5 minutes.
	// 5 минут.
	IntradayCandleTimeFrame_INTRADAYCANDLE_TIMEFRAME_M5 IntradayCandleTimeFrame = 2
	// 15 minutes.
	// 15 минут.
	IntradayCandleTimeFrame_INTRADAYCANDLE_TIMEFRAME_M15 IntradayCandleTimeFrame = 3
	// 1 hour.
	// 1 час.
	IntradayCandleTimeFrame_INTRADAYCANDLE_TIMEFRAME_H1 IntradayCandleTimeFrame = 4
)

// Enum value maps for IntradayCandleTimeFrame.
var (
	IntradayCandleTimeFrame_name = map[int32]string{
		0: "INTRADAYCANDLE_TIMEFRAME_UNSPECIFIED",
		1: "INTRADAYCANDLE_TIMEFRAME_M1",
		2: "INTRADAYCANDLE_TIMEFRAME_M5",
		3: "INTRADAYCANDLE_TIMEFRAME_M15",
		4: "INTRADAYCANDLE_TIMEFRAME_H1",
	}
	IntradayCandleTimeFrame_value = map[string]int32{
		"INTRADAYCANDLE_TIMEFRAME_UNSPECIFIED": 0,
		"INTRADAYCANDLE_TIMEFRAME_M1":          1,
		"INTRADAYCANDLE_TIMEFRAME_M5":          2,
		"INTRADAYCANDLE_TIMEFRAME_M15":         3,
		"INTRADAYCANDLE_TIMEFRAME_H1":          4,
	}
)

func (x IntradayCandleTimeFrame) Enum() *IntradayCandleTimeFrame {
	p := new(IntradayCandleTimeFrame)
	*p = x
	return p
}

func (x IntradayCandleTimeFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntradayCandleTimeFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tradeapi_v1_candles_proto_enumTypes[0].Descriptor()
}

func (IntradayCandleTimeFrame) Type() protoreflect.EnumType {
	return &file_proto_tradeapi_v1_candles_proto_enumTypes[0]
}

func (x IntradayCandleTimeFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntradayCandleTimeFrame.Descriptor instead.
func (IntradayCandleTimeFrame) EnumDescriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_candles_proto_rawDescGZIP(), []int{0}
}

// Timeframe for day candle.
// Временной интервал дневной свечи.
type DayCandleTimeFrame int32

const (
	// Value is not specified. Do not use.
	// Значение не указано. Не использовать.
	DayCandleTimeFrame_DAYCANDLE_TIMEFRAME_UNSPECIFIED DayCandleTimeFrame = 0
	// 1 day.
	// 1 день.
	DayCandleTimeFrame_DAYCANDLE_TIMEFRAME_D1 DayCandleTimeFrame = 1
	// 1 week.
	// 1 неделя.
	DayCandleTimeFrame_DAYCANDLE_TIMEFRAME_W1 DayCandleTimeFrame = 2
)

// Enum value maps for DayCandleTimeFrame.
var (
	DayCandleTimeFrame_name = map[int32]string{
		0: "DAYCANDLE_TIMEFRAME_UNSPECIFIED",
		1: "DAYCANDLE_TIMEFRAME_D1",
		2: "DAYCANDLE_TIMEFRAME_W1",
	}
	DayCandleTimeFrame_value = map[string]int32{
		"DAYCANDLE_TIMEFRAME_UNSPECIFIED": 0,
		"DAYCANDLE_TIMEFRAME_D1":          1,
		"DAYCANDLE_TIMEFRAME_W1":          2,
	}
)

func (x DayCandleTimeFrame) Enum() *DayCandleTimeFrame {
	p := new(DayCandleTimeFrame)
	*p = x
	return p
}

func (x DayCandleTimeFrame) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayCandleTimeFrame) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tradeapi_v1_candles_proto_enumTypes[1].Descriptor()
}

func (DayCandleTimeFrame) Type() protoreflect.EnumType {
	return &file_proto_tradeapi_v1_candles_proto_enumTypes[1]
}

func (x DayCandleTimeFrame) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayCandleTimeFrame.Descriptor instead.
func (DayCandleTimeFrame) EnumDescriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_candles_proto_rawDescGZIP(), []int{1}
}

// Day candle.
// Дневная свеча.
type DayCandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date (local time).
	// Дата (по времени биржи).
	Date *date.Date `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// Open price.
	// Цена открытия.
	Open *Decimal `protobuf:"bytes,2,opt,name=open,proto3" json:"open,omitempty"`
	// Close price.
	// Цена закрытия.
	Close *Decimal `protobuf:"bytes,3,opt,name=close,proto3" json:"close,omitempty"`
	// High price.
	// Максимальная цена.
	High *Decimal `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`
	// Low price.
	// Минимальная цена.
	Low *Decimal `protobuf:"bytes,5,opt,name=low,proto3" json:"low,omitempty"`
	// Volume.
	// Объем торгов.
	Volume int64 `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *DayCandle) Reset() {
	*x = DayCandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayCandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayCandle) ProtoMessage() {}

func (x *DayCandle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayCandle.ProtoReflect.Descriptor instead.
func (*DayCandle) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_candles_proto_rawDescGZIP(), []int{0}
}

func (x *DayCandle) GetDate() *date.Date {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DayCandle) GetOpen() *Decimal {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *DayCandle) GetClose() *Decimal {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *DayCandle) GetHigh() *Decimal {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *DayCandle) GetLow() *Decimal {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *DayCandle) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// Intraday candle.
// Внетридневная свеча.
type IntradayCandle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time (UTC).
	// Время (по UTC).
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Open price.
	// Цена открытия.
	Open *Decimal `protobuf:"bytes,2,opt,name=open,proto3" json:"open,omitempty"`
	// Close price.
	// Цена закрытия.
	Close *Decimal `protobuf:"bytes,3,opt,name=close,proto3" json:"close,omitempty"`
	// High price.
	// Максимальная цена.
	High *Decimal `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`
	// Low price.
	// Минимальная цена.
	Low *Decimal `protobuf:"bytes,5,opt,name=low,proto3" json:"low,omitempty"`
	// Volume.
	// Объем торгов.
	Volume int64 `protobuf:"varint,6,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *IntradayCandle) Reset() {
	*x = IntradayCandle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntradayCandle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntradayCandle) ProtoMessage() {}

func (x *IntradayCandle) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntradayCandle.ProtoReflect.Descriptor instead.
func (*IntradayCandle) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_candles_proto_rawDescGZIP(), []int{1}
}

func (x *IntradayCandle) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *IntradayCandle) GetOpen() *Decimal {
	if x != nil {
		return x.Open
	}
	return nil
}

func (x *IntradayCandle) GetClose() *Decimal {
	if x != nil {
		return x.Close
	}
	return nil
}

func (x *IntradayCandle) GetHigh() *Decimal {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *IntradayCandle) GetLow() *Decimal {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *IntradayCandle) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// Day candles interval.
// Интервал запроса дневных свечей.
type DayCandleInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date from.
	// Дата начала.
	From *date.Date `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// Date to.
	// Дата окончания.
	To *date.Date `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Candles count limit.
	// Количество свечей.
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *DayCandleInterval) Reset() {
	*x = DayCandleInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DayCandleInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DayCandleInterval) ProtoMessage() {}

func (x *DayCandleInterval) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DayCandleInterval.ProtoReflect.Descriptor instead.
func (*DayCandleInterval) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_candles_proto_rawDescGZIP(), []int{2}
}

func (x *DayCandleInterval) GetFrom() *date.Date {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *DayCandleInterval) GetTo() *date.Date {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *DayCandleInterval) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Intraday candles interval.
// Интервал запроса внутридневных свечей.
type IntradayCandleInterval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date from.
	// Дата начала.
	From *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// Date to.
	// Дата окончания.
	To *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Candles count limit.
	// Количество свечей.
	Count int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *IntradayCandleInterval) Reset() {
	*x = IntradayCandleInterval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntradayCandleInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntradayCandleInterval) ProtoMessage() {}

func (x *IntradayCandleInterval) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntradayCandleInterval.ProtoReflect.Descriptor instead.
func (*IntradayCandleInterval) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_candles_proto_rawDescGZIP(), []int{3}
}

func (x *IntradayCandleInterval) GetFrom() *timestamppb.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *IntradayCandleInterval) GetTo() *timestamppb.Timestamp {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *IntradayCandleInterval) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Get day candles request.
// Запрос дневных свечей.
type GetDayCandlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trading Board.
	// Режим торгов.
	SecurityBoard string `protobuf:"bytes,1,opt,name=security_board,json=securityBoard,proto3" json:"security_board,omitempty"`
	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,2,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Timeframe.
	// Временной интервал.
	TimeFrame DayCandleTimeFrame `protobuf:"varint,3,opt,name=time_frame,json=timeFrame,proto3,enum=proto.tradeapi.v1.DayCandleTimeFrame" json:"time_frame,omitempty"`
	// Interval.
	// Интервал.
	Interval *DayCandleInterval `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *GetDayCandlesRequest) Reset() {
	*x = GetDayCandlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDayCandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDayCandlesRequest) ProtoMessage() {}

func (x *GetDayCandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDayCandlesRequest.ProtoReflect.Descriptor instead.
func (*GetDayCandlesRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_candles_proto_rawDescGZIP(), []int{4}
}

func (x *GetDayCandlesRequest) GetSecurityBoard() string {
	if x != nil {
		return x.SecurityBoard
	}
	return ""
}

func (x *GetDayCandlesRequest) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *GetDayCandlesRequest) GetTimeFrame() DayCandleTimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return DayCandleTimeFrame_DAYCANDLE_TIMEFRAME_UNSPECIFIED
}

func (x *GetDayCandlesRequest) GetInterval() *DayCandleInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

// GetDayCandlesRequest result.
// Результат GetDatCandlesRequest.
type GetDayCandlesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Candles list.
	// Список свечей.
	Candles []*DayCandle `protobuf:"bytes,1,rep,name=candles,proto3" json:"candles,omitempty"`
}

func (x *GetDayCandlesResult) Reset() {
	*x = GetDayCandlesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDayCandlesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDayCandlesResult) ProtoMessage() {}

func (x *GetDayCandlesResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDayCandlesResult.ProtoReflect.Descriptor instead.
func (*GetDayCandlesResult) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_candles_proto_rawDescGZIP(), []int{5}
}

func (x *GetDayCandlesResult) GetCandles() []*DayCandle {
	if x != nil {
		return x.Candles
	}
	return nil
}

// Get intraday candles request.
// Запрос внутридневных свечей.
type GetIntradayCandlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trading Board.
	// Режим торгов.
	SecurityBoard string `protobuf:"bytes,1,opt,name=security_board,json=securityBoard,proto3" json:"security_board,omitempty"`
	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,2,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Timeframe.
	// Временной интервал.
	TimeFrame IntradayCandleTimeFrame `protobuf:"varint,3,opt,name=time_frame,json=timeFrame,proto3,enum=proto.tradeapi.v1.IntradayCandleTimeFrame" json:"time_frame,omitempty"`
	// Interval.
	// Интервал.
	Interval *IntradayCandleInterval `protobuf:"bytes,4,opt,name=interval,proto3" json:"interval,omitempty"`
}

func (x *GetIntradayCandlesRequest) Reset() {
	*x = GetIntradayCandlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntradayCandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntradayCandlesRequest) ProtoMessage() {}

func (x *GetIntradayCandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntradayCandlesRequest.ProtoReflect.Descriptor instead.
func (*GetIntradayCandlesRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_candles_proto_rawDescGZIP(), []int{6}
}

func (x *GetIntradayCandlesRequest) GetSecurityBoard() string {
	if x != nil {
		return x.SecurityBoard
	}
	return ""
}

func (x *GetIntradayCandlesRequest) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *GetIntradayCandlesRequest) GetTimeFrame() IntradayCandleTimeFrame {
	if x != nil {
		return x.TimeFrame
	}
	return IntradayCandleTimeFrame_INTRADAYCANDLE_TIMEFRAME_UNSPECIFIED
}

func (x *GetIntradayCandlesRequest) GetInterval() *IntradayCandleInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

// GetIntradayCandlesRequest result.
// Результат GetIntradayCandlesRequest.
type GetIntradayCandlesResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Candles list.
	// Список свечей.
	Candles []*IntradayCandle `protobuf:"bytes,1,rep,name=candles,proto3" json:"candles,omitempty"`
}

func (x *GetIntradayCandlesResult) Reset() {
	*x = GetIntradayCandlesResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntradayCandlesResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntradayCandlesResult) ProtoMessage() {}

func (x *GetIntradayCandlesResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_candles_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntradayCandlesResult.ProtoReflect.Descriptor instead.
func (*GetIntradayCandlesResult) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_candles_proto_rawDescGZIP(), []int{7}
}

func (x *GetIntradayCandlesResult) GetCandles() []*IntradayCandle {
	if x != nil {
		return x.Candles
	}
	return nil
}

var File_proto_tradeapi_v1_candles_proto protoreflect.FileDescriptor

var file_proto_tradeapi_v1_candles_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x02,
	0x0a, 0x09, 0x44, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xa2, 0x02, 0x0a, 0x0e, 0x49,
	0x6e, 0x74, 0x72, 0x61, 0x64, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x38, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x69, 0x67,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x6f, 0x77,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0x73, 0x0a, 0x11, 0x44, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x02, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x64, 0x61,
	0x79, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x2a, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x4d,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x79, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x22, 0xf9, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x64, 0x61, 0x79, 0x43, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x74, 0x72, 0x61, 0x64, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x64, 0x61,
	0x79, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x57, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x72, 0x61, 0x64, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x72, 0x61,
	0x64, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x2a, 0xc8, 0x01, 0x0a, 0x17, 0x49, 0x6e, 0x74, 0x72, 0x61, 0x64, 0x61, 0x79, 0x43,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x24, 0x49, 0x4e, 0x54, 0x52, 0x41, 0x44, 0x41, 0x59, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x54, 0x52,
	0x41, 0x44, 0x41, 0x59, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x31, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x54,
	0x52, 0x41, 0x44, 0x41, 0x59, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x35, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e,
	0x54, 0x52, 0x41, 0x44, 0x41, 0x59, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x31, 0x35, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b,
	0x49, 0x4e, 0x54, 0x52, 0x41, 0x44, 0x41, 0x59, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x48, 0x31, 0x10, 0x04, 0x2a, 0x71, 0x0a,
	0x12, 0x44, 0x61, 0x79, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x41, 0x59, 0x43, 0x41, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x59, 0x43,
	0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x44, 0x31, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x59, 0x43, 0x41, 0x4e, 0x44, 0x4c,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x31, 0x10, 0x02,
	0x42, 0x4a, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x65,
	0x76, 0x73, 0x61, 0x6d, 0x73, 0x6f, 0x6e, 0x6f, 0x76, 0x2f, 0x46, 0x69, 0x6e, 0x61, 0x6d, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x47, 0x6f, 0x2f, 0x76, 0x32, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61,
	0x70, 0x69, 0xaa, 0x02, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_tradeapi_v1_candles_proto_rawDescOnce sync.Once
	file_proto_tradeapi_v1_candles_proto_rawDescData = file_proto_tradeapi_v1_candles_proto_rawDesc
)

func file_proto_tradeapi_v1_candles_proto_rawDescGZIP() []byte {
	file_proto_tradeapi_v1_candles_proto_rawDescOnce.Do(func() {
		file_proto_tradeapi_v1_candles_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tradeapi_v1_candles_proto_rawDescData)
	})
	return file_proto_tradeapi_v1_candles_proto_rawDescData
}

var file_proto_tradeapi_v1_candles_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_tradeapi_v1_candles_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_proto_tradeapi_v1_candles_proto_goTypes = []interface{}{
	(IntradayCandleTimeFrame)(0),      // 0: proto.tradeapi.v1.IntradayCandleTimeFrame
	(DayCandleTimeFrame)(0),           // 1: proto.tradeapi.v1.DayCandleTimeFrame
	(*DayCandle)(nil),                 // 2: proto.tradeapi.v1.DayCandle
	(*IntradayCandle)(nil),            // 3: proto.tradeapi.v1.IntradayCandle
	(*DayCandleInterval)(nil),         // 4: proto.tradeapi.v1.DayCandleInterval
	(*IntradayCandleInterval)(nil),    // 5: proto.tradeapi.v1.IntradayCandleInterval
	(*GetDayCandlesRequest)(nil),      // 6: proto.tradeapi.v1.GetDayCandlesRequest
	(*GetDayCandlesResult)(nil),       // 7: proto.tradeapi.v1.GetDayCandlesResult
	(*GetIntradayCandlesRequest)(nil), // 8: proto.tradeapi.v1.GetIntradayCandlesRequest
	(*GetIntradayCandlesResult)(nil),  // 9: proto.tradeapi.v1.GetIntradayCandlesResult
	(*date.Date)(nil),                 // 10: google.type.Date
	(*Decimal)(nil),                   // 11: proto.tradeapi.v1.Decimal
	(*timestamppb.Timestamp)(nil),     // 12: google.protobuf.Timestamp
}
var file_proto_tradeapi_v1_candles_proto_depIdxs = []int32{
	10, // 0: proto.tradeapi.v1.DayCandle.date:type_name -> google.type.Date
	11, // 1: proto.tradeapi.v1.DayCandle.open:type_name -> proto.tradeapi.v1.Decimal
	11, // 2: proto.tradeapi.v1.DayCandle.close:type_name -> proto.tradeapi.v1.Decimal
	11, // 3: proto.tradeapi.v1.DayCandle.high:type_name -> proto.tradeapi.v1.Decimal
	11, // 4: proto.tradeapi.v1.DayCandle.low:type_name -> proto.tradeapi.v1.Decimal
	12, // 5: proto.tradeapi.v1.IntradayCandle.timestamp:type_name -> google.protobuf.Timestamp
	11, // 6: proto.tradeapi.v1.IntradayCandle.open:type_name -> proto.tradeapi.v1.Decimal
	11, // 7: proto.tradeapi.v1.IntradayCandle.close:type_name -> proto.tradeapi.v1.Decimal
	11, // 8: proto.tradeapi.v1.IntradayCandle.high:type_name -> proto.tradeapi.v1.Decimal
	11, // 9: proto.tradeapi.v1.IntradayCandle.low:type_name -> proto.tradeapi.v1.Decimal
	10, // 10: proto.tradeapi.v1.DayCandleInterval.from:type_name -> google.type.Date
	10, // 11: proto.tradeapi.v1.DayCandleInterval.to:type_name -> google.type.Date
	12, // 12: proto.tradeapi.v1.IntradayCandleInterval.from:type_name -> google.protobuf.Timestamp
	12, // 13: proto.tradeapi.v1.IntradayCandleInterval.to:type_name -> google.protobuf.Timestamp
	1,  // 14: proto.tradeapi.v1.GetDayCandlesRequest.time_frame:type_name -> proto.tradeapi.v1.DayCandleTimeFrame
	4,  // 15: proto.tradeapi.v1.GetDayCandlesRequest.interval:type_name -> proto.tradeapi.v1.DayCandleInterval
	2,  // 16: proto.tradeapi.v1.GetDayCandlesResult.candles:type_name -> proto.tradeapi.v1.DayCandle
	0,  // 17: proto.tradeapi.v1.GetIntradayCandlesRequest.time_frame:type_name -> proto.tradeapi.v1.IntradayCandleTimeFrame
	5,  // 18: proto.tradeapi.v1.GetIntradayCandlesRequest.interval:type_name -> proto.tradeapi.v1.IntradayCandleInterval
	3,  // 19: proto.tradeapi.v1.GetIntradayCandlesResult.candles:type_name -> proto.tradeapi.v1.IntradayCandle
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_proto_tradeapi_v1_candles_proto_init() }
func file_proto_tradeapi_v1_candles_proto_init() {
	if File_proto_tradeapi_v1_candles_proto != nil {
		return
	}
	file_proto_tradeapi_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_tradeapi_v1_candles_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayCandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_candles_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntradayCandle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_candles_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DayCandleInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_candles_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntradayCandleInterval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_candles_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDayCandlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_candles_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDayCandlesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_candles_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntradayCandlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_candles_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntradayCandlesResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tradeapi_v1_candles_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tradeapi_v1_candles_proto_goTypes,
		DependencyIndexes: file_proto_tradeapi_v1_candles_proto_depIdxs,
		EnumInfos:         file_proto_tradeapi_v1_candles_proto_enumTypes,
		MessageInfos:      file_proto_tradeapi_v1_candles_proto_msgTypes,
	}.Build()
	File_proto_tradeapi_v1_candles_proto = out.File
	file_proto_tradeapi_v1_candles_proto_rawDesc = nil
	file_proto_tradeapi_v1_candles_proto_goTypes = nil
	file_proto_tradeapi_v1_candles_proto_depIdxs = nil
}
