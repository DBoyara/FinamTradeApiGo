// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: proto/tradeapi/v1/events.proto

package tradeapi

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimeFrame_Unit int32

const (
	// Value is not specified. Do not use.
	// Значение не указано. Не использовать.
	TimeFrame_UNIT_UNSPECIFIED TimeFrame_Unit = 0
	// Munute.
	// Минута.
	TimeFrame_UNIT_MINUTE TimeFrame_Unit = 1
	// Hour.
	// Час.
	TimeFrame_UNIT_HOUR TimeFrame_Unit = 2
	// Day.
	// День.
	TimeFrame_UNIT_DAY TimeFrame_Unit = 3
	// Week.
	// Неделя.
	TimeFrame_UNIT_WEEK TimeFrame_Unit = 4
	// Month.
	// Месяц.
	TimeFrame_UNIT_MONTH TimeFrame_Unit = 5
	// Quarter.
	// Квартал.
	TimeFrame_UNIT_QUARTER TimeFrame_Unit = 6
	// Year.
	// Год.
	TimeFrame_UNIT_YEAR TimeFrame_Unit = 7
)

// Enum value maps for TimeFrame_Unit.
var (
	TimeFrame_Unit_name = map[int32]string{
		0: "UNIT_UNSPECIFIED",
		1: "UNIT_MINUTE",
		2: "UNIT_HOUR",
		3: "UNIT_DAY",
		4: "UNIT_WEEK",
		5: "UNIT_MONTH",
		6: "UNIT_QUARTER",
		7: "UNIT_YEAR",
	}
	TimeFrame_Unit_value = map[string]int32{
		"UNIT_UNSPECIFIED": 0,
		"UNIT_MINUTE":      1,
		"UNIT_HOUR":        2,
		"UNIT_DAY":         3,
		"UNIT_WEEK":        4,
		"UNIT_MONTH":       5,
		"UNIT_QUARTER":     6,
		"UNIT_YEAR":        7,
	}
)

func (x TimeFrame_Unit) Enum() *TimeFrame_Unit {
	p := new(TimeFrame_Unit)
	*p = x
	return p
}

func (x TimeFrame_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeFrame_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tradeapi_v1_events_proto_enumTypes[0].Descriptor()
}

func (TimeFrame_Unit) Type() protoreflect.EnumType {
	return &file_proto_tradeapi_v1_events_proto_enumTypes[0]
}

func (x TimeFrame_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeFrame_Unit.Descriptor instead.
func (TimeFrame_Unit) EnumDescriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{0, 0}
}

// Timeframe.
// Таймфрейм.
type TimeFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timeframe units.
	// Единицы измерения таймфрейма.
	TimeUnit TimeFrame_Unit `protobuf:"varint,1,opt,name=time_unit,json=timeUnit,proto3,enum=proto.tradeapi.v1.TimeFrame_Unit" json:"time_unit,omitempty"`
}

func (x *TimeFrame) Reset() {
	*x = TimeFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeFrame) ProtoMessage() {}

func (x *TimeFrame) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeFrame.ProtoReflect.Descriptor instead.
func (*TimeFrame) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{0}
}

func (x *TimeFrame) GetTimeUnit() TimeFrame_Unit {
	if x != nil {
		return x.TimeUnit
	}
	return TimeFrame_UNIT_UNSPECIFIED
}

// Subscription/unsubscription.
// Подписка/отписка.
type SubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set only one parameter.
	// Определите только одно из полей.
	//
	// Types that are assignable to Payload:
	//
	//	*SubscriptionRequest_OrderBookSubscribeRequest
	//	*SubscriptionRequest_OrderBookUnsubscribeRequest
	//	*SubscriptionRequest_OrderTradeSubscribeRequest
	//	*SubscriptionRequest_OrderTradeUnsubscribeRequest
	Payload isSubscriptionRequest_Payload `protobuf_oneof:"payload"`
}

func (x *SubscriptionRequest) Reset() {
	*x = SubscriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionRequest) ProtoMessage() {}

func (x *SubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{1}
}

func (m *SubscriptionRequest) GetPayload() isSubscriptionRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *SubscriptionRequest) GetOrderBookSubscribeRequest() *OrderBookSubscribeRequest {
	if x, ok := x.GetPayload().(*SubscriptionRequest_OrderBookSubscribeRequest); ok {
		return x.OrderBookSubscribeRequest
	}
	return nil
}

func (x *SubscriptionRequest) GetOrderBookUnsubscribeRequest() *OrderBookUnsubscribeRequest {
	if x, ok := x.GetPayload().(*SubscriptionRequest_OrderBookUnsubscribeRequest); ok {
		return x.OrderBookUnsubscribeRequest
	}
	return nil
}

func (x *SubscriptionRequest) GetOrderTradeSubscribeRequest() *OrderTradeSubscribeRequest {
	if x, ok := x.GetPayload().(*SubscriptionRequest_OrderTradeSubscribeRequest); ok {
		return x.OrderTradeSubscribeRequest
	}
	return nil
}

func (x *SubscriptionRequest) GetOrderTradeUnsubscribeRequest() *OrderTradeUnsubscribeRequest {
	if x, ok := x.GetPayload().(*SubscriptionRequest_OrderTradeUnsubscribeRequest); ok {
		return x.OrderTradeUnsubscribeRequest
	}
	return nil
}

type isSubscriptionRequest_Payload interface {
	isSubscriptionRequest_Payload()
}

type SubscriptionRequest_OrderBookSubscribeRequest struct {
	// OrderBook subscription request.
	// Запрос подписки на стакан.
	OrderBookSubscribeRequest *OrderBookSubscribeRequest `protobuf:"bytes,1,opt,name=order_book_subscribe_request,json=orderBookSubscribeRequest,proto3,oneof"`
}

type SubscriptionRequest_OrderBookUnsubscribeRequest struct {
	// OrderBook unsubscribe request.
	// Запрос на отписку от стакана.
	OrderBookUnsubscribeRequest *OrderBookUnsubscribeRequest `protobuf:"bytes,2,opt,name=order_book_unsubscribe_request,json=orderBookUnsubscribeRequest,proto3,oneof"`
}

type SubscriptionRequest_OrderTradeSubscribeRequest struct {
	// Subscribe for trades and orders.
	// Запрос подписки на ордера и сделки.
	OrderTradeSubscribeRequest *OrderTradeSubscribeRequest `protobuf:"bytes,3,opt,name=order_trade_subscribe_request,json=orderTradeSubscribeRequest,proto3,oneof"`
}

type SubscriptionRequest_OrderTradeUnsubscribeRequest struct {
	// Cancel all previous subscription for trades and orders.
	// Отменить все предыдущие запросы на подписки на ордера и сделки.
	OrderTradeUnsubscribeRequest *OrderTradeUnsubscribeRequest `protobuf:"bytes,4,opt,name=order_trade_unsubscribe_request,json=orderTradeUnsubscribeRequest,proto3,oneof"`
}

func (*SubscriptionRequest_OrderBookSubscribeRequest) isSubscriptionRequest_Payload() {}

func (*SubscriptionRequest_OrderBookUnsubscribeRequest) isSubscriptionRequest_Payload() {}

func (*SubscriptionRequest_OrderTradeSubscribeRequest) isSubscriptionRequest_Payload() {}

func (*SubscriptionRequest_OrderTradeUnsubscribeRequest) isSubscriptionRequest_Payload() {}

// Event.
// Событие.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// It is possible to set the only field.
	// Только одно из полей может быть заполнено.
	//
	// Types that are assignable to Payload:
	//
	//	*Event_Order
	//	*Event_Trade
	//	*Event_OrderBook
	//	*Event_Portfolio
	//	*Event_Response
	Payload isEvent_Payload `protobuf_oneof:"payload"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{2}
}

func (m *Event) GetPayload() isEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Event) GetOrder() *OrderEvent {
	if x, ok := x.GetPayload().(*Event_Order); ok {
		return x.Order
	}
	return nil
}

func (x *Event) GetTrade() *TradeEvent {
	if x, ok := x.GetPayload().(*Event_Trade); ok {
		return x.Trade
	}
	return nil
}

func (x *Event) GetOrderBook() *OrderBookEvent {
	if x, ok := x.GetPayload().(*Event_OrderBook); ok {
		return x.OrderBook
	}
	return nil
}

func (x *Event) GetPortfolio() *PortfolioEvent {
	if x, ok := x.GetPayload().(*Event_Portfolio); ok {
		return x.Portfolio
	}
	return nil
}

func (x *Event) GetResponse() *ResponseEvent {
	if x, ok := x.GetPayload().(*Event_Response); ok {
		return x.Response
	}
	return nil
}

type isEvent_Payload interface {
	isEvent_Payload()
}

type Event_Order struct {
	// Order event.
	// Событие с заявкой.
	Order *OrderEvent `protobuf:"bytes,1,opt,name=order,proto3,oneof"`
}

type Event_Trade struct {
	// Trade event.
	// Событие со сделкой.
	Trade *TradeEvent `protobuf:"bytes,2,opt,name=trade,proto3,oneof"`
}

type Event_OrderBook struct {
	// OrderBook event.
	// Событие стакана.
	OrderBook *OrderBookEvent `protobuf:"bytes,3,opt,name=order_book,json=orderBook,proto3,oneof"`
}

type Event_Portfolio struct {
	// Portfolio event.
	// Событие портфеля.
	Portfolio *PortfolioEvent `protobuf:"bytes,5,opt,name=portfolio,proto3,oneof"`
}

type Event_Response struct {
	// Request execution result.
	// Результат выполнения запроса.
	Response *ResponseEvent `protobuf:"bytes,10,opt,name=response,proto3,oneof"`
}

func (*Event_Order) isEvent_Payload() {}

func (*Event_Trade) isEvent_Payload() {}

func (*Event_OrderBook) isEvent_Payload() {}

func (*Event_Portfolio) isEvent_Payload() {}

func (*Event_Response) isEvent_Payload() {}

// OrderBook subscribe request.
// Запрос подписки на стакан.
type OrderBookSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request ID.
	// Идентификатор запроса.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,2,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Trading Board.
	// Режим торгов.
	SecurityBoard string `protobuf:"bytes,3,opt,name=security_board,json=securityBoard,proto3" json:"security_board,omitempty"`
}

func (x *OrderBookSubscribeRequest) Reset() {
	*x = OrderBookSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBookSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookSubscribeRequest) ProtoMessage() {}

func (x *OrderBookSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookSubscribeRequest.ProtoReflect.Descriptor instead.
func (*OrderBookSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{3}
}

func (x *OrderBookSubscribeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *OrderBookSubscribeRequest) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *OrderBookSubscribeRequest) GetSecurityBoard() string {
	if x != nil {
		return x.SecurityBoard
	}
	return ""
}

// OrderBook unsubscribe request.
// Запрос на отписку от стакана.
type OrderBookUnsubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request ID.
	// Идентификатор запроса.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,2,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Trading Board.
	// Режим торгов.
	SecurityBoard string `protobuf:"bytes,3,opt,name=security_board,json=securityBoard,proto3" json:"security_board,omitempty"`
}

func (x *OrderBookUnsubscribeRequest) Reset() {
	*x = OrderBookUnsubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBookUnsubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookUnsubscribeRequest) ProtoMessage() {}

func (x *OrderBookUnsubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookUnsubscribeRequest.ProtoReflect.Descriptor instead.
func (*OrderBookUnsubscribeRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{4}
}

func (x *OrderBookUnsubscribeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *OrderBookUnsubscribeRequest) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *OrderBookUnsubscribeRequest) GetSecurityBoard() string {
	if x != nil {
		return x.SecurityBoard
	}
	return ""
}

// Subscribe for trades and orders.
// Запрос подписки на ордера и сделки.
type OrderTradeSubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request ID.
	// Идентификатор запроса.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Включить сделки в подписку.
	IncludeTrades bool `protobuf:"varint,2,opt,name=include_trades,json=includeTrades,proto3" json:"include_trades,omitempty"`
	// Включить заявки в подписку.
	// Тикер инструмента.
	IncludeOrders bool `protobuf:"varint,3,opt,name=include_orders,json=includeOrders,proto3" json:"include_orders,omitempty"`
	// Торговые коды счетов.
	ClientIds []string `protobuf:"bytes,4,rep,name=client_ids,json=clientIds,proto3" json:"client_ids,omitempty"`
}

func (x *OrderTradeSubscribeRequest) Reset() {
	*x = OrderTradeSubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTradeSubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTradeSubscribeRequest) ProtoMessage() {}

func (x *OrderTradeSubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTradeSubscribeRequest.ProtoReflect.Descriptor instead.
func (*OrderTradeSubscribeRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{5}
}

func (x *OrderTradeSubscribeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *OrderTradeSubscribeRequest) GetIncludeTrades() bool {
	if x != nil {
		return x.IncludeTrades
	}
	return false
}

func (x *OrderTradeSubscribeRequest) GetIncludeOrders() bool {
	if x != nil {
		return x.IncludeOrders
	}
	return false
}

func (x *OrderTradeSubscribeRequest) GetClientIds() []string {
	if x != nil {
		return x.ClientIds
	}
	return nil
}

// Cancel all previous subscription for trades and orders.
// Отменить все предыдущие запросы на подписки на ордера и сделки.
type OrderTradeUnsubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Request ID.
	// Идентификатор запроса.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *OrderTradeUnsubscribeRequest) Reset() {
	*x = OrderTradeUnsubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTradeUnsubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTradeUnsubscribeRequest) ProtoMessage() {}

func (x *OrderTradeUnsubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTradeUnsubscribeRequest.ProtoReflect.Descriptor instead.
func (*OrderTradeUnsubscribeRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{6}
}

func (x *OrderTradeUnsubscribeRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Portfolio subscription.
// Подписка на портфель.
type PortfolioSubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// What kind of data the response contains.
	// Какие данные будут в ответе.
	Content *PortfolioContent `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *PortfolioSubscription) Reset() {
	*x = PortfolioSubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioSubscription) ProtoMessage() {}

func (x *PortfolioSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioSubscription.ProtoReflect.Descriptor instead.
func (*PortfolioSubscription) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{7}
}

func (x *PortfolioSubscription) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PortfolioSubscription) GetContent() *PortfolioContent {
	if x != nil {
		return x.Content
	}
	return nil
}

// Order event.
// Событие с заявкой.
type OrderEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order No. Appear only when an order is placed in OrderBook.
	// Биржевой номер заявки. Появляется после того, как заявка попадает в стакан.
	OrderNo int64 `protobuf:"varint,1,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	// Transaction Id . Assigned when a command for new order creation is sent.
	// Идентификатор транзакции. Назначается после подачи команды на создание новой заявки.
	TransactionId int32 `protobuf:"varint,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,3,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Order status.
	// Состояние заявки.
	Status OrderStatus `protobuf:"varint,5,opt,name=status,proto3,enum=proto.tradeapi.v1.OrderStatus" json:"status,omitempty"`
	// Transaction direction.
	// Направление сделки.
	BuySell BuySell `protobuf:"varint,6,opt,name=buy_sell,json=buySell,proto3,enum=proto.tradeapi.v1.BuySell" json:"buy_sell,omitempty"`
	// Time of Order placement in UTC.
	// Время регистрации заявки на бирже. В UTC.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Lot price.
	// Цена за лот.
	Price float64 `protobuf:"fixed64,8,opt,name=price,proto3" json:"price,omitempty"`
	// Volume in lots.
	// Количество, в лотах.
	Quantity int32 `protobuf:"varint,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Residual volume in lots.
	// Неисполненный остаток, в лотах.
	Balance int32 `protobuf:"varint,10,opt,name=balance,proto3" json:"balance,omitempty"`
	// Rejection reason or conditional order resolution.
	// Причина отказа или вердикт по условной заявке.
	Message string `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	// Price currency.
	// Валюта цены инструмента.
	Currency string `protobuf:"bytes,12,opt,name=currency,proto3" json:"currency,omitempty"`
	// Conditional order properties.
	// Параметры условной заявки.
	Condition *OrderCondition `protobuf:"bytes,13,opt,name=condition,proto3" json:"condition,omitempty"`
	// Order lifetime.
	// Время действия заявки.
	ValidBefore *OrderValidBefore `protobuf:"bytes,14,opt,name=valid_before,json=validBefore,proto3" json:"valid_before,omitempty"`
	// Time of order registration on the server in UTC.
	// Время, когда заявка была зарегистрирована на сервере. В UTC.
	AcceptedAt *timestamp.Timestamp `protobuf:"bytes,15,opt,name=accepted_at,json=acceptedAt,proto3" json:"accepted_at,omitempty"`
}

func (x *OrderEvent) Reset() {
	*x = OrderEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderEvent) ProtoMessage() {}

func (x *OrderEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderEvent.ProtoReflect.Descriptor instead.
func (*OrderEvent) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{8}
}

func (x *OrderEvent) GetOrderNo() int64 {
	if x != nil {
		return x.OrderNo
	}
	return 0
}

func (x *OrderEvent) GetTransactionId() int32 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *OrderEvent) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *OrderEvent) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *OrderEvent) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (x *OrderEvent) GetBuySell() BuySell {
	if x != nil {
		return x.BuySell
	}
	return BuySell_BUY_SELL_UNSPECIFIED
}

func (x *OrderEvent) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderEvent) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderEvent) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderEvent) GetBalance() int32 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *OrderEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OrderEvent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *OrderEvent) GetCondition() *OrderCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *OrderEvent) GetValidBefore() *OrderValidBefore {
	if x != nil {
		return x.ValidBefore
	}
	return nil
}

func (x *OrderEvent) GetAcceptedAt() *timestamp.Timestamp {
	if x != nil {
		return x.AcceptedAt
	}
	return nil
}

// Trade event.
// Событие со сделкой.
type TradeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,1,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Trade No.
	// Номер сделки.
	TradeNo int64 `protobuf:"varint,2,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	// Order No.
	// Номер заявки.
	OrderNo int64 `protobuf:"varint,3,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,4,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Time of trade registration on stock exchange in UTC.
	// Время исполнения сделки на бирже. В UTC.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Volume in lots.
	// Количество, в лотах.
	Quantity int64 `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Trade Price.
	// Цена сделки.
	Price float64 `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	// Trade currency value.
	// Объём сделки в валюте инструмента.
	Value float64 `protobuf:"fixed64,8,opt,name=value,proto3" json:"value,omitempty"`
	// Transaction direction.
	// Направление сделки.
	BuySell BuySell `protobuf:"varint,9,opt,name=buy_sell,json=buySell,proto3,enum=proto.tradeapi.v1.BuySell" json:"buy_sell,omitempty"`
	// Fee, RUB.
	// Комиссия, в рублях.
	Commission float64 `protobuf:"fixed64,10,opt,name=commission,proto3" json:"commission,omitempty"`
	// Trade currency.
	// Валюта сделки.
	Currency string `protobuf:"bytes,11,opt,name=currency,proto3" json:"currency,omitempty"`
	// Accrued interest.
	// НКД сделки.
	AccruedInterest float64 `protobuf:"fixed64,12,opt,name=accrued_interest,json=accruedInterest,proto3" json:"accrued_interest,omitempty"`
}

func (x *TradeEvent) Reset() {
	*x = TradeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeEvent) ProtoMessage() {}

func (x *TradeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeEvent.ProtoReflect.Descriptor instead.
func (*TradeEvent) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{9}
}

func (x *TradeEvent) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *TradeEvent) GetTradeNo() int64 {
	if x != nil {
		return x.TradeNo
	}
	return 0
}

func (x *TradeEvent) GetOrderNo() int64 {
	if x != nil {
		return x.OrderNo
	}
	return 0
}

func (x *TradeEvent) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *TradeEvent) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *TradeEvent) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *TradeEvent) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *TradeEvent) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *TradeEvent) GetBuySell() BuySell {
	if x != nil {
		return x.BuySell
	}
	return BuySell_BUY_SELL_UNSPECIFIED
}

func (x *TradeEvent) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *TradeEvent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TradeEvent) GetAccruedInterest() float64 {
	if x != nil {
		return x.AccruedInterest
	}
	return 0
}

// Order book row.
// Строка стакана.
type OrderBookRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price.
	// Цена.
	Price float64 `protobuf:"fixed64,1,opt,name=price,json=p,proto3" json:"price,omitempty"`
	// Lots.
	// Количество лотов.
	Quantity int64 `protobuf:"varint,2,opt,name=quantity,json=q,proto3" json:"quantity,omitempty"`
}

func (x *OrderBookRow) Reset() {
	*x = OrderBookRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBookRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookRow) ProtoMessage() {}

func (x *OrderBookRow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookRow.ProtoReflect.Descriptor instead.
func (*OrderBookRow) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{10}
}

func (x *OrderBookRow) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderBookRow) GetQuantity() int64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// OrderBook event.
// Событие стакана.
type OrderBookEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,1,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Trading Board.
	// Режим торгов.
	SecurityBoard string `protobuf:"bytes,2,opt,name=security_board,json=securityBoard,proto3" json:"security_board,omitempty"`
	// Asks.
	// Заявки на продажу.
	Asks []*OrderBookRow `protobuf:"bytes,3,rep,name=asks,proto3" json:"asks,omitempty"`
	// Bids.
	// Заявки на покупку.
	Bids []*OrderBookRow `protobuf:"bytes,4,rep,name=bids,proto3" json:"bids,omitempty"`
}

func (x *OrderBookEvent) Reset() {
	*x = OrderBookEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBookEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookEvent) ProtoMessage() {}

func (x *OrderBookEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookEvent.ProtoReflect.Descriptor instead.
func (*OrderBookEvent) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{11}
}

func (x *OrderBookEvent) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *OrderBookEvent) GetSecurityBoard() string {
	if x != nil {
		return x.SecurityBoard
	}
	return ""
}

func (x *OrderBookEvent) GetAsks() []*OrderBookRow {
	if x != nil {
		return x.Asks
	}
	return nil
}

func (x *OrderBookEvent) GetBids() []*OrderBookRow {
	if x != nil {
		return x.Bids
	}
	return nil
}

// Portfolio event.
// Событие портфеля.
type PortfolioEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// What kind of data portfolio event contains.
	// Какие данные находятся в событии портфеля.
	Content *PortfolioContent `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// Current equity, RUB.
	// Текущая оценка портфеля в рублях.
	Equity float64 `protobuf:"fixed64,3,opt,name=equity,proto3" json:"equity,omitempty"`
	// Open Equity, RUB.
	// Входящая оценка портфеля в рублях.
	Balance float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	// DEPO positions.
	// Позиции DEPO.
	Positions []*PositionRow `protobuf:"bytes,5,rep,name=positions,proto3" json:"positions,omitempty"`
	// Currency positions.
	// Валютные позиции.
	Currencies []*CurrencyRow `protobuf:"bytes,6,rep,name=currencies,proto3" json:"currencies,omitempty"`
	// Money positions.
	// Денежные позиции.
	Money []*MoneyRow `protobuf:"bytes,7,rep,name=money,proto3" json:"money,omitempty"`
}

func (x *PortfolioEvent) Reset() {
	*x = PortfolioEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioEvent) ProtoMessage() {}

func (x *PortfolioEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioEvent.ProtoReflect.Descriptor instead.
func (*PortfolioEvent) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_events_proto_rawDescGZIP(), []int{12}
}

func (x *PortfolioEvent) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *PortfolioEvent) GetContent() *PortfolioContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PortfolioEvent) GetEquity() float64 {
	if x != nil {
		return x.Equity
	}
	return 0
}

func (x *PortfolioEvent) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *PortfolioEvent) GetPositions() []*PositionRow {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *PortfolioEvent) GetCurrencies() []*CurrencyRow {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *PortfolioEvent) GetMoney() []*MoneyRow {
	if x != nil {
		return x.Money
	}
	return nil
}

var File_proto_tradeapi_v1_events_proto protoreflect.FileDescriptor

var file_proto_tradeapi_v1_events_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49,
	0x4e, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x41,
	0x59, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54,
	0x45, 0x52, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x59, 0x45, 0x41,
	0x52, 0x10, 0x07, 0x22, 0xf6, 0x03, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x6f, 0x0a, 0x1c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x19, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x75, 0x0a, 0x1e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f,
	0x6b, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x1d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x78, 0x0a, 0x1f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x1c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc7, 0x02, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a,
	0x05, 0x74, 0x72, 0x61, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x6f,
	0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x12, 0x3e, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x22,
	0x88, 0x01, 0x0a, 0x1b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x55, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x1a, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x73, 0x22, 0x3d, 0x0a, 0x1c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69,
	0x6f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x82, 0x05, 0x0a, 0x0a, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x65,
	0x6c, 0x6c, 0x52, 0x07, 0x62, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa5,
	0x03, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f,
	0x73, 0x65, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x07, 0x62, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x72, 0x75, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x6f, 0x6f, 0x6b, 0x52, 0x6f, 0x77, 0x12, 0x10, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x70, 0x12, 0x13, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x71, 0x22, 0xc6, 0x01,
	0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x04,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x33, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x6f, 0x77,
	0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x22, 0xcf, 0x02, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x52, 0x09, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x6f,
	0x77, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x27, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6d, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_tradeapi_v1_events_proto_rawDescOnce sync.Once
	file_proto_tradeapi_v1_events_proto_rawDescData = file_proto_tradeapi_v1_events_proto_rawDesc
)

func file_proto_tradeapi_v1_events_proto_rawDescGZIP() []byte {
	file_proto_tradeapi_v1_events_proto_rawDescOnce.Do(func() {
		file_proto_tradeapi_v1_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tradeapi_v1_events_proto_rawDescData)
	})
	return file_proto_tradeapi_v1_events_proto_rawDescData
}

var file_proto_tradeapi_v1_events_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_tradeapi_v1_events_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_tradeapi_v1_events_proto_goTypes = []interface{}{
	(TimeFrame_Unit)(0),                  // 0: proto.tradeapi.v1.TimeFrame.Unit
	(*TimeFrame)(nil),                    // 1: proto.tradeapi.v1.TimeFrame
	(*SubscriptionRequest)(nil),          // 2: proto.tradeapi.v1.SubscriptionRequest
	(*Event)(nil),                        // 3: proto.tradeapi.v1.Event
	(*OrderBookSubscribeRequest)(nil),    // 4: proto.tradeapi.v1.OrderBookSubscribeRequest
	(*OrderBookUnsubscribeRequest)(nil),  // 5: proto.tradeapi.v1.OrderBookUnsubscribeRequest
	(*OrderTradeSubscribeRequest)(nil),   // 6: proto.tradeapi.v1.OrderTradeSubscribeRequest
	(*OrderTradeUnsubscribeRequest)(nil), // 7: proto.tradeapi.v1.OrderTradeUnsubscribeRequest
	(*PortfolioSubscription)(nil),        // 8: proto.tradeapi.v1.PortfolioSubscription
	(*OrderEvent)(nil),                   // 9: proto.tradeapi.v1.OrderEvent
	(*TradeEvent)(nil),                   // 10: proto.tradeapi.v1.TradeEvent
	(*OrderBookRow)(nil),                 // 11: proto.tradeapi.v1.OrderBookRow
	(*OrderBookEvent)(nil),               // 12: proto.tradeapi.v1.OrderBookEvent
	(*PortfolioEvent)(nil),               // 13: proto.tradeapi.v1.PortfolioEvent
	(*ResponseEvent)(nil),                // 14: proto.tradeapi.v1.ResponseEvent
	(*PortfolioContent)(nil),             // 15: proto.tradeapi.v1.PortfolioContent
	(OrderStatus)(0),                     // 16: proto.tradeapi.v1.OrderStatus
	(BuySell)(0),                         // 17: proto.tradeapi.v1.BuySell
	(*timestamp.Timestamp)(nil),          // 18: google.protobuf.Timestamp
	(*OrderCondition)(nil),               // 19: proto.tradeapi.v1.OrderCondition
	(*OrderValidBefore)(nil),             // 20: proto.tradeapi.v1.OrderValidBefore
	(*PositionRow)(nil),                  // 21: proto.tradeapi.v1.PositionRow
	(*CurrencyRow)(nil),                  // 22: proto.tradeapi.v1.CurrencyRow
	(*MoneyRow)(nil),                     // 23: proto.tradeapi.v1.MoneyRow
}
var file_proto_tradeapi_v1_events_proto_depIdxs = []int32{
	0,  // 0: proto.tradeapi.v1.TimeFrame.time_unit:type_name -> proto.tradeapi.v1.TimeFrame.Unit
	4,  // 1: proto.tradeapi.v1.SubscriptionRequest.order_book_subscribe_request:type_name -> proto.tradeapi.v1.OrderBookSubscribeRequest
	5,  // 2: proto.tradeapi.v1.SubscriptionRequest.order_book_unsubscribe_request:type_name -> proto.tradeapi.v1.OrderBookUnsubscribeRequest
	6,  // 3: proto.tradeapi.v1.SubscriptionRequest.order_trade_subscribe_request:type_name -> proto.tradeapi.v1.OrderTradeSubscribeRequest
	7,  // 4: proto.tradeapi.v1.SubscriptionRequest.order_trade_unsubscribe_request:type_name -> proto.tradeapi.v1.OrderTradeUnsubscribeRequest
	9,  // 5: proto.tradeapi.v1.Event.order:type_name -> proto.tradeapi.v1.OrderEvent
	10, // 6: proto.tradeapi.v1.Event.trade:type_name -> proto.tradeapi.v1.TradeEvent
	12, // 7: proto.tradeapi.v1.Event.order_book:type_name -> proto.tradeapi.v1.OrderBookEvent
	13, // 8: proto.tradeapi.v1.Event.portfolio:type_name -> proto.tradeapi.v1.PortfolioEvent
	14, // 9: proto.tradeapi.v1.Event.response:type_name -> proto.tradeapi.v1.ResponseEvent
	15, // 10: proto.tradeapi.v1.PortfolioSubscription.content:type_name -> proto.tradeapi.v1.PortfolioContent
	16, // 11: proto.tradeapi.v1.OrderEvent.status:type_name -> proto.tradeapi.v1.OrderStatus
	17, // 12: proto.tradeapi.v1.OrderEvent.buy_sell:type_name -> proto.tradeapi.v1.BuySell
	18, // 13: proto.tradeapi.v1.OrderEvent.created_at:type_name -> google.protobuf.Timestamp
	19, // 14: proto.tradeapi.v1.OrderEvent.condition:type_name -> proto.tradeapi.v1.OrderCondition
	20, // 15: proto.tradeapi.v1.OrderEvent.valid_before:type_name -> proto.tradeapi.v1.OrderValidBefore
	18, // 16: proto.tradeapi.v1.OrderEvent.accepted_at:type_name -> google.protobuf.Timestamp
	18, // 17: proto.tradeapi.v1.TradeEvent.created_at:type_name -> google.protobuf.Timestamp
	17, // 18: proto.tradeapi.v1.TradeEvent.buy_sell:type_name -> proto.tradeapi.v1.BuySell
	11, // 19: proto.tradeapi.v1.OrderBookEvent.asks:type_name -> proto.tradeapi.v1.OrderBookRow
	11, // 20: proto.tradeapi.v1.OrderBookEvent.bids:type_name -> proto.tradeapi.v1.OrderBookRow
	15, // 21: proto.tradeapi.v1.PortfolioEvent.content:type_name -> proto.tradeapi.v1.PortfolioContent
	21, // 22: proto.tradeapi.v1.PortfolioEvent.positions:type_name -> proto.tradeapi.v1.PositionRow
	22, // 23: proto.tradeapi.v1.PortfolioEvent.currencies:type_name -> proto.tradeapi.v1.CurrencyRow
	23, // 24: proto.tradeapi.v1.PortfolioEvent.money:type_name -> proto.tradeapi.v1.MoneyRow
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_proto_tradeapi_v1_events_proto_init() }
func file_proto_tradeapi_v1_events_proto_init() {
	if File_proto_tradeapi_v1_events_proto != nil {
		return
	}
	file_proto_tradeapi_v1_common_proto_init()
	file_proto_tradeapi_v1_orders_proto_init()
	file_proto_tradeapi_v1_portfolios_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_tradeapi_v1_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBookSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBookUnsubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTradeSubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTradeUnsubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioSubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBookRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBookEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_tradeapi_v1_events_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SubscriptionRequest_OrderBookSubscribeRequest)(nil),
		(*SubscriptionRequest_OrderBookUnsubscribeRequest)(nil),
		(*SubscriptionRequest_OrderTradeSubscribeRequest)(nil),
		(*SubscriptionRequest_OrderTradeUnsubscribeRequest)(nil),
	}
	file_proto_tradeapi_v1_events_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Event_Order)(nil),
		(*Event_Trade)(nil),
		(*Event_OrderBook)(nil),
		(*Event_Portfolio)(nil),
		(*Event_Response)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tradeapi_v1_events_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tradeapi_v1_events_proto_goTypes,
		DependencyIndexes: file_proto_tradeapi_v1_events_proto_depIdxs,
		EnumInfos:         file_proto_tradeapi_v1_events_proto_enumTypes,
		MessageInfos:      file_proto_tradeapi_v1_events_proto_msgTypes,
	}.Build()
	File_proto_tradeapi_v1_events_proto = out.File
	file_proto_tradeapi_v1_events_proto_rawDesc = nil
	file_proto_tradeapi_v1_events_proto_goTypes = nil
	file_proto_tradeapi_v1_events_proto_depIdxs = nil
}
