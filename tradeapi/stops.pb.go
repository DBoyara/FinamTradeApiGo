// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: proto/tradeapi/v1/stops.proto

package tradeapi

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Stop order status.
// Состояние заявки.
type StopStatus int32

const (
	// Value is not specified. Do not use.
	// Значение не указано. Не использовать.
	StopStatus_STOP_STATUS_UNSPECIFIED StopStatus = 0
	// Order is not in OrderBook.
	// Заявка не выставлена.
	StopStatus_STOP_STATUS_NONE StopStatus = 1
	// Order is in OrderBook.
	// Заявка выставлена.
	StopStatus_STOP_STATUS_ACTIVE StopStatus = 2
	// Order is cancelled.
	// Заявка отменена.
	StopStatus_STOP_STATUS_CANCELLED StopStatus = 3
	// Order is executed.
	// Заявка выполнена.
	StopStatus_STOP_STATUS_EXECUTED StopStatus = 4
)

// Enum value maps for StopStatus.
var (
	StopStatus_name = map[int32]string{
		0: "STOP_STATUS_UNSPECIFIED",
		1: "STOP_STATUS_NONE",
		2: "STOP_STATUS_ACTIVE",
		3: "STOP_STATUS_CANCELLED",
		4: "STOP_STATUS_EXECUTED",
	}
	StopStatus_value = map[string]int32{
		"STOP_STATUS_UNSPECIFIED": 0,
		"STOP_STATUS_NONE":        1,
		"STOP_STATUS_ACTIVE":      2,
		"STOP_STATUS_CANCELLED":   3,
		"STOP_STATUS_EXECUTED":    4,
	}
)

func (x StopStatus) Enum() *StopStatus {
	p := new(StopStatus)
	*p = x
	return p
}

func (x StopStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tradeapi_v1_stops_proto_enumTypes[0].Descriptor()
}

func (StopStatus) Type() protoreflect.EnumType {
	return &file_proto_tradeapi_v1_stops_proto_enumTypes[0]
}

func (x StopStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopStatus.Descriptor instead.
func (StopStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{0}
}

// Stop quantity units.
// Единицы объема стоп-заявки.
type StopQuantityUnits int32

const (
	// Value is not specified. Do not use.
	// Значение не указано. Не использовать.
	StopQuantityUnits_STOP_QUANTITY_UNITS_UNSPECIFIED StopQuantityUnits = 0
	// Percent.
	// Значение а процентах.
	StopQuantityUnits_STOP_QUANTITY_UNITS_PERCENT StopQuantityUnits = 1
	// Lots.
	// Значение в лотах.
	StopQuantityUnits_STOP_QUANTITY_UNITS_LOTS StopQuantityUnits = 2
)

// Enum value maps for StopQuantityUnits.
var (
	StopQuantityUnits_name = map[int32]string{
		0: "STOP_QUANTITY_UNITS_UNSPECIFIED",
		1: "STOP_QUANTITY_UNITS_PERCENT",
		2: "STOP_QUANTITY_UNITS_LOTS",
	}
	StopQuantityUnits_value = map[string]int32{
		"STOP_QUANTITY_UNITS_UNSPECIFIED": 0,
		"STOP_QUANTITY_UNITS_PERCENT":     1,
		"STOP_QUANTITY_UNITS_LOTS":        2,
	}
)

func (x StopQuantityUnits) Enum() *StopQuantityUnits {
	p := new(StopQuantityUnits)
	*p = x
	return p
}

func (x StopQuantityUnits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopQuantityUnits) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tradeapi_v1_stops_proto_enumTypes[1].Descriptor()
}

func (StopQuantityUnits) Type() protoreflect.EnumType {
	return &file_proto_tradeapi_v1_stops_proto_enumTypes[1]
}

func (x StopQuantityUnits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopQuantityUnits.Descriptor instead.
func (StopQuantityUnits) EnumDescriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{1}
}

// Stop price units.
// Единицы цены стоп-заявки.
type StopPriceUnits int32

const (
	// Value is not specified. Do not use.
	// Значение не указано. Не использовать.
	StopPriceUnits_STOP_PRICE_UNITS_UNSPECIFIED StopPriceUnits = 0
	// Percent.
	// Значение а процентах.
	StopPriceUnits_STOP_PRICE_UNITS_PERCENT StopPriceUnits = 1
	// Lots.
	// Значение в единицах цены.
	StopPriceUnits_STOP_PRICE_UNITS_PIPS StopPriceUnits = 2
)

// Enum value maps for StopPriceUnits.
var (
	StopPriceUnits_name = map[int32]string{
		0: "STOP_PRICE_UNITS_UNSPECIFIED",
		1: "STOP_PRICE_UNITS_PERCENT",
		2: "STOP_PRICE_UNITS_PIPS",
	}
	StopPriceUnits_value = map[string]int32{
		"STOP_PRICE_UNITS_UNSPECIFIED": 0,
		"STOP_PRICE_UNITS_PERCENT":     1,
		"STOP_PRICE_UNITS_PIPS":        2,
	}
)

func (x StopPriceUnits) Enum() *StopPriceUnits {
	p := new(StopPriceUnits)
	*p = x
	return p
}

func (x StopPriceUnits) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopPriceUnits) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_tradeapi_v1_stops_proto_enumTypes[2].Descriptor()
}

func (StopPriceUnits) Type() protoreflect.EnumType {
	return &file_proto_tradeapi_v1_stops_proto_enumTypes[2]
}

func (x StopPriceUnits) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopPriceUnits.Descriptor instead.
func (StopPriceUnits) EnumDescriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{2}
}

// Stop Order.
// Стоп-заявка.
type Stop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Stop Order Id.
	// Идентификатор стоп-заявки.
	StopId int32 `protobuf:"varint,1,opt,name=stop_id,json=stopId,proto3" json:"stop_id,omitempty"`
	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,2,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Security Board.
	// Основной режим торгов инструмента.
	SecurityBoard string `protobuf:"bytes,3,opt,name=security_board,json=securityBoard,proto3" json:"security_board,omitempty"`
	// Market.
	// Рынок.
	Market Market `protobuf:"varint,4,opt,name=market,proto3,enum=proto.tradeapi.v1.Market" json:"market,omitempty"`
	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Transaction direction.
	// Направление сделки.
	BuySell BuySell `protobuf:"varint,6,opt,name=buy_sell,json=buySell,proto3,enum=proto.tradeapi.v1.BuySell" json:"buy_sell,omitempty"`
	// Expiration date for FORTS order.
	// Дата экспирации заявки FORTS.
	ExpirationDate *timestamp.Timestamp `protobuf:"bytes,7,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// Linked order ID.
	// Биржевой номер связанной (активной) заявки.
	LinkOrder int64 `protobuf:"varint,8,opt,name=link_order,json=linkOrder,proto3" json:"link_order,omitempty"`
	// Order lifetime.
	// Время действия заявки.
	ValidBefore *OrderValidBefore `protobuf:"bytes,9,opt,name=valid_before,json=validBefore,proto3" json:"valid_before,omitempty"`
	// Order status.
	// Состояние заявки.
	Status StopStatus `protobuf:"varint,10,opt,name=status,proto3,enum=proto.tradeapi.v1.StopStatus" json:"status,omitempty"`
	// Rejection reason or conditional order resolution.
	// Причина отказа или вердикт по условной заявке.
	Message string `protobuf:"bytes,11,opt,name=message,proto3" json:"message,omitempty"`
	// Order No.
	// Номер заявки, полученной в результате исполнения стопа.
	OrderNo int64 `protobuf:"varint,12,opt,name=order_no,json=orderNo,proto3" json:"order_no,omitempty"`
	// Trade No.
	// Номер сделки, которая привела к исполнению стопа.
	TradeNo int64 `protobuf:"varint,13,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	// Time of order registration on the server in UTC.
	// Время, когда заявка была зарегистрирована на сервере. В UTC.
	AcceptedAt *timestamp.Timestamp `protobuf:"bytes,14,opt,name=accepted_at,json=acceptedAt,proto3" json:"accepted_at,omitempty"`
	// Time of order canceled on the server in UTC.
	// Время, когда заявка была отменена на сервере. В UTC.
	CanceledAt *timestamp.Timestamp `protobuf:"bytes,15,opt,name=canceled_at,json=canceledAt,proto3" json:"canceled_at,omitempty"`
	// Price currency.
	// Валюта цены.
	Currency string `protobuf:"bytes,16,opt,name=currency,proto3" json:"currency,omitempty"`
	// Take profit: local extremum.
	// Тейк профит: текущий локальный экстремум.
	TakeProfitExtremum float64 `protobuf:"fixed64,17,opt,name=take_profit_extremum,json=takeProfitExtremum,proto3" json:"take_profit_extremum,omitempty"`
	// Take profit: correction level.
	// Тейк профит: текущий уровень коррекции.
	TakeProfitLevel float64 `protobuf:"fixed64,18,opt,name=take_profit_level,json=takeProfitLevel,proto3" json:"take_profit_level,omitempty"`
	// Stop loss.
	// Стоп лосс.
	StopLoss *StopLoss `protobuf:"bytes,19,opt,name=stop_loss,json=stopLoss,proto3" json:"stop_loss,omitempty"`
	// Take profit.
	// Тейк профит.
	TakeProfit *TakeProfit `protobuf:"bytes,20,opt,name=take_profit,json=takeProfit,proto3" json:"take_profit,omitempty"`
}

func (x *Stop) Reset() {
	*x = Stop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stop) ProtoMessage() {}

func (x *Stop) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stop.ProtoReflect.Descriptor instead.
func (*Stop) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{0}
}

func (x *Stop) GetStopId() int32 {
	if x != nil {
		return x.StopId
	}
	return 0
}

func (x *Stop) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *Stop) GetSecurityBoard() string {
	if x != nil {
		return x.SecurityBoard
	}
	return ""
}

func (x *Stop) GetMarket() Market {
	if x != nil {
		return x.Market
	}
	return Market_MARKET_UNSPECIFIED
}

func (x *Stop) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Stop) GetBuySell() BuySell {
	if x != nil {
		return x.BuySell
	}
	return BuySell_BUY_SELL_UNSPECIFIED
}

func (x *Stop) GetExpirationDate() *timestamp.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Stop) GetLinkOrder() int64 {
	if x != nil {
		return x.LinkOrder
	}
	return 0
}

func (x *Stop) GetValidBefore() *OrderValidBefore {
	if x != nil {
		return x.ValidBefore
	}
	return nil
}

func (x *Stop) GetStatus() StopStatus {
	if x != nil {
		return x.Status
	}
	return StopStatus_STOP_STATUS_UNSPECIFIED
}

func (x *Stop) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Stop) GetOrderNo() int64 {
	if x != nil {
		return x.OrderNo
	}
	return 0
}

func (x *Stop) GetTradeNo() int64 {
	if x != nil {
		return x.TradeNo
	}
	return 0
}

func (x *Stop) GetAcceptedAt() *timestamp.Timestamp {
	if x != nil {
		return x.AcceptedAt
	}
	return nil
}

func (x *Stop) GetCanceledAt() *timestamp.Timestamp {
	if x != nil {
		return x.CanceledAt
	}
	return nil
}

func (x *Stop) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Stop) GetTakeProfitExtremum() float64 {
	if x != nil {
		return x.TakeProfitExtremum
	}
	return 0
}

func (x *Stop) GetTakeProfitLevel() float64 {
	if x != nil {
		return x.TakeProfitLevel
	}
	return 0
}

func (x *Stop) GetStopLoss() *StopLoss {
	if x != nil {
		return x.StopLoss
	}
	return nil
}

func (x *Stop) GetTakeProfit() *TakeProfit {
	if x != nil {
		return x.TakeProfit
	}
	return nil
}

// StopLoss order.
// Стоп лосс заявка.
type StopLoss struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Activation price.
	// Цена активации.
	ActivationPrice float64 `protobuf:"fixed64,1,opt,name=activation_price,json=activationPrice,proto3" json:"activation_price,omitempty"`
	// Price.
	// Цена заявки.
	Price float64 `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	// Market price.
	// По рынку.
	MarketPrice bool `protobuf:"varint,3,opt,name=market_price,json=marketPrice,proto3" json:"market_price,omitempty"`
	// Quantity.
	// Количество.
	Quantity *StopQuantity `protobuf:"bytes,4,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Time, seconds.
	// Защитное время, сек.
	Time int32 `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	// Use credit.
	// Использовать кредит.
	UseCredit bool `protobuf:"varint,6,opt,name=use_credit,json=useCredit,proto3" json:"use_credit,omitempty"`
}

func (x *StopLoss) Reset() {
	*x = StopLoss{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopLoss) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopLoss) ProtoMessage() {}

func (x *StopLoss) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopLoss.ProtoReflect.Descriptor instead.
func (*StopLoss) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{1}
}

func (x *StopLoss) GetActivationPrice() float64 {
	if x != nil {
		return x.ActivationPrice
	}
	return 0
}

func (x *StopLoss) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *StopLoss) GetMarketPrice() bool {
	if x != nil {
		return x.MarketPrice
	}
	return false
}

func (x *StopLoss) GetQuantity() *StopQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *StopLoss) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *StopLoss) GetUseCredit() bool {
	if x != nil {
		return x.UseCredit
	}
	return false
}

// TakeProfit order.
// Тейк профит заявка.
type TakeProfit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Activation price.
	// Цена активации.
	ActivationPrice float64 `protobuf:"fixed64,1,opt,name=activation_price,json=activationPrice,proto3" json:"activation_price,omitempty"`
	// Correction.
	// Коррекция.
	CorrectionPrice *StopPrice `protobuf:"bytes,2,opt,name=correction_price,json=correctionPrice,proto3" json:"correction_price,omitempty"`
	// Spread price.
	// Защитный спрэд.
	SpreadPrice *StopPrice `protobuf:"bytes,3,opt,name=spread_price,json=spreadPrice,proto3" json:"spread_price,omitempty"`
	// Market price.
	// По рынку.
	MarketPrice bool `protobuf:"varint,4,opt,name=market_price,json=marketPrice,proto3" json:"market_price,omitempty"`
	// Quantity.
	// Количество.
	Quantity *StopQuantity `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// Time, seconds.
	// Защитное время, сек.
	Time int32 `protobuf:"varint,6,opt,name=time,proto3" json:"time,omitempty"`
	// Use credit.
	// Использовать кредит.
	UseCredit bool `protobuf:"varint,7,opt,name=use_credit,json=useCredit,proto3" json:"use_credit,omitempty"`
}

func (x *TakeProfit) Reset() {
	*x = TakeProfit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeProfit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeProfit) ProtoMessage() {}

func (x *TakeProfit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeProfit.ProtoReflect.Descriptor instead.
func (*TakeProfit) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{2}
}

func (x *TakeProfit) GetActivationPrice() float64 {
	if x != nil {
		return x.ActivationPrice
	}
	return 0
}

func (x *TakeProfit) GetCorrectionPrice() *StopPrice {
	if x != nil {
		return x.CorrectionPrice
	}
	return nil
}

func (x *TakeProfit) GetSpreadPrice() *StopPrice {
	if x != nil {
		return x.SpreadPrice
	}
	return nil
}

func (x *TakeProfit) GetMarketPrice() bool {
	if x != nil {
		return x.MarketPrice
	}
	return false
}

func (x *TakeProfit) GetQuantity() *StopQuantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

func (x *TakeProfit) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *TakeProfit) GetUseCredit() bool {
	if x != nil {
		return x.UseCredit
	}
	return false
}

// Stop quantity.
// Объем стоп-заявки.
type StopQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value.
	// Значение объема.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// Units.
	// Единицы объема.
	Units StopQuantityUnits `protobuf:"varint,2,opt,name=units,proto3,enum=proto.tradeapi.v1.StopQuantityUnits" json:"units,omitempty"`
}

func (x *StopQuantity) Reset() {
	*x = StopQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopQuantity) ProtoMessage() {}

func (x *StopQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopQuantity.ProtoReflect.Descriptor instead.
func (*StopQuantity) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{3}
}

func (x *StopQuantity) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StopQuantity) GetUnits() StopQuantityUnits {
	if x != nil {
		return x.Units
	}
	return StopQuantityUnits_STOP_QUANTITY_UNITS_UNSPECIFIED
}

// Stop price.
// Цена стоп-заявки.
type StopPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value.
	// Значение цены.
	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
	// Units.
	// Единицы цены.
	Units StopPriceUnits `protobuf:"varint,2,opt,name=units,proto3,enum=proto.tradeapi.v1.StopPriceUnits" json:"units,omitempty"`
}

func (x *StopPrice) Reset() {
	*x = StopPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopPrice) ProtoMessage() {}

func (x *StopPrice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopPrice.ProtoReflect.Descriptor instead.
func (*StopPrice) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{4}
}

func (x *StopPrice) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *StopPrice) GetUnits() StopPriceUnits {
	if x != nil {
		return x.Units
	}
	return StopPriceUnits_STOP_PRICE_UNITS_UNSPECIFIED
}

// Request for Stop Order cancellation.
// Запрос на снятие стоп-заявки.
type CancelStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Stop Order Id.
	// Идентификатор стоп-заявки.
	StopId int32 `protobuf:"varint,2,opt,name=stop_id,json=stopId,proto3" json:"stop_id,omitempty"`
}

func (x *CancelStopRequest) Reset() {
	*x = CancelStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelStopRequest) ProtoMessage() {}

func (x *CancelStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelStopRequest.ProtoReflect.Descriptor instead.
func (*CancelStopRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{5}
}

func (x *CancelStopRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CancelStopRequest) GetStopId() int32 {
	if x != nil {
		return x.StopId
	}
	return 0
}

// Result of Stop Order cancellation.
// Результат отмены стоп-заявки.
type CancelStopResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Stop Order Id.
	// Идентификатор стоп-заявки.
	StopId int32 `protobuf:"varint,2,opt,name=stop_id,json=stopId,proto3" json:"stop_id,omitempty"`
}

func (x *CancelStopResult) Reset() {
	*x = CancelStopResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelStopResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelStopResult) ProtoMessage() {}

func (x *CancelStopResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelStopResult.ProtoReflect.Descriptor instead.
func (*CancelStopResult) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{6}
}

func (x *CancelStopResult) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CancelStopResult) GetStopId() int32 {
	if x != nil {
		return x.StopId
	}
	return 0
}

// Request for the list of Stop Orders.
// Запрос стоп-заявок.
type GetStopsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Include executed stops in response.
	// Вернуть исполненные стоп-заявки.
	IncludeExecuted bool `protobuf:"varint,2,opt,name=include_executed,json=includeExecuted,proto3" json:"include_executed,omitempty"`
	// Include canceled stops in response.
	// Вернуть отмененные стоп-заявки.
	IncludeCanceled bool `protobuf:"varint,3,opt,name=include_canceled,json=includeCanceled,proto3" json:"include_canceled,omitempty"`
	// Include active stops in response.
	// Вернуть активные стоп-заявки.
	IncludeActive bool `protobuf:"varint,4,opt,name=include_active,json=includeActive,proto3" json:"include_active,omitempty"`
}

func (x *GetStopsRequest) Reset() {
	*x = GetStopsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStopsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStopsRequest) ProtoMessage() {}

func (x *GetStopsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStopsRequest.ProtoReflect.Descriptor instead.
func (*GetStopsRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{7}
}

func (x *GetStopsRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetStopsRequest) GetIncludeExecuted() bool {
	if x != nil {
		return x.IncludeExecuted
	}
	return false
}

func (x *GetStopsRequest) GetIncludeCanceled() bool {
	if x != nil {
		return x.IncludeCanceled
	}
	return false
}

func (x *GetStopsRequest) GetIncludeActive() bool {
	if x != nil {
		return x.IncludeActive
	}
	return false
}

// Result of Stop Orders request.
// Результат запроса стоп-заявок.
type GetStopsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Stop Orders List.
	// Список стоп-заявок.
	Stops []*Stop `protobuf:"bytes,2,rep,name=stops,proto3" json:"stops,omitempty"`
}

func (x *GetStopsResult) Reset() {
	*x = GetStopsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStopsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStopsResult) ProtoMessage() {}

func (x *GetStopsResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStopsResult.ProtoReflect.Descriptor instead.
func (*GetStopsResult) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{8}
}

func (x *GetStopsResult) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetStopsResult) GetStops() []*Stop {
	if x != nil {
		return x.Stops
	}
	return nil
}

// New Stop Order request.
// Запрос на выставление стоп заявки.
type NewStopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Trading Board.
	// Режим торгов.
	SecurityBoard string `protobuf:"bytes,2,opt,name=security_board,json=securityBoard,proto3" json:"security_board,omitempty"`
	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,3,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Transaction direction.
	// Направление сделки.
	BuySell BuySell `protobuf:"varint,4,opt,name=buy_sell,json=buySell,proto3,enum=proto.tradeapi.v1.BuySell" json:"buy_sell,omitempty"`
	// Stop loss.
	// Стоп лосс.
	StopLoss *StopLoss `protobuf:"bytes,5,opt,name=stop_loss,json=stopLoss,proto3" json:"stop_loss,omitempty"`
	// Take profit.
	// Тейк профит.
	TakeProfit *TakeProfit `protobuf:"bytes,6,opt,name=take_profit,json=takeProfit,proto3" json:"take_profit,omitempty"`
	// Expiration date for FORTS order.
	// Дата экспирации заявки FORTS.
	ExpirationDate *timestamp.Timestamp `protobuf:"bytes,7,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"`
	// Linked order ID.
	// Биржевой номер связанной (активной) заявки.
	LinkOrder int64 `protobuf:"varint,8,opt,name=link_order,json=linkOrder,proto3" json:"link_order,omitempty"`
	// Order lifetime.
	// Время действия заявки.
	ValidBefore *OrderValidBefore `protobuf:"bytes,9,opt,name=valid_before,json=validBefore,proto3" json:"valid_before,omitempty"`
}

func (x *NewStopRequest) Reset() {
	*x = NewStopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewStopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewStopRequest) ProtoMessage() {}

func (x *NewStopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewStopRequest.ProtoReflect.Descriptor instead.
func (*NewStopRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{9}
}

func (x *NewStopRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *NewStopRequest) GetSecurityBoard() string {
	if x != nil {
		return x.SecurityBoard
	}
	return ""
}

func (x *NewStopRequest) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *NewStopRequest) GetBuySell() BuySell {
	if x != nil {
		return x.BuySell
	}
	return BuySell_BUY_SELL_UNSPECIFIED
}

func (x *NewStopRequest) GetStopLoss() *StopLoss {
	if x != nil {
		return x.StopLoss
	}
	return nil
}

func (x *NewStopRequest) GetTakeProfit() *TakeProfit {
	if x != nil {
		return x.TakeProfit
	}
	return nil
}

func (x *NewStopRequest) GetExpirationDate() *timestamp.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *NewStopRequest) GetLinkOrder() int64 {
	if x != nil {
		return x.LinkOrder
	}
	return 0
}

func (x *NewStopRequest) GetValidBefore() *OrderValidBefore {
	if x != nil {
		return x.ValidBefore
	}
	return nil
}

// Result of new Stop Order request.
// Результат выставления стоп заявки.
type NewStopResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account Id.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// Stop Order Id.
	// Идентификатор стоп заявки.
	StopId int32 `protobuf:"varint,2,opt,name=stop_id,json=stopId,proto3" json:"stop_id,omitempty"`
	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,3,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Trading Board.
	// Режим торгов.
	SecurityBoard string `protobuf:"bytes,4,opt,name=security_board,json=securityBoard,proto3" json:"security_board,omitempty"`
}

func (x *NewStopResult) Reset() {
	*x = NewStopResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewStopResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewStopResult) ProtoMessage() {}

func (x *NewStopResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_stops_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewStopResult.ProtoReflect.Descriptor instead.
func (*NewStopResult) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_stops_proto_rawDescGZIP(), []int{10}
}

func (x *NewStopResult) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *NewStopResult) GetStopId() int32 {
	if x != nil {
		return x.StopId
	}
	return 0
}

func (x *NewStopResult) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *NewStopResult) GetSecurityBoard() string {
	if x != nil {
		return x.SecurityBoard
	}
	return ""
}

var File_proto_tradeapi_v1_stops_proto protoreflect.FileDescriptor

var file_proto_tradeapi_v1_stops_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x93, 0x07, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x52,
	0x07, 0x62, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x43, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0c,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x61,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x5f, 0x65, 0x78, 0x74, 0x72, 0x65, 0x6d, 0x75, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x12, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x45, 0x78, 0x74, 0x72, 0x65,
	0x6d, 0x75, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x38, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x52,
	0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x0a, 0x74,
	0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x08, 0x53, 0x74,
	0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6f, 0x70, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x22, 0xd4, 0x02, 0x0a, 0x0a, 0x54,
	0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0f, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a,
	0x0c, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x0b, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x22, 0x60, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x22, 0x5a, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22,
	0x49, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x10, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x6f, 0x70, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x22, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x70, 0x73,
	0x22, 0xd6, 0x03, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x62, 0x75, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x52, 0x07, 0x62, 0x75, 0x79, 0x53,
	0x65, 0x6c, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4c,
	0x6f, 0x73, 0x73, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x73, 0x73, 0x12, 0x3e, 0x0a,
	0x0b, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x52, 0x0a, 0x74, 0x61, 0x6b, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x43, 0x0a,
	0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x46, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x62, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x0d, 0x4e, 0x65,
	0x77, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x2a, 0x8c, 0x01,
	0x0a, 0x0a, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x77, 0x0a, 0x11,
	0x53, 0x74, 0x6f, 0x70, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x51,
	0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x4c,
	0x4f, 0x54, 0x53, 0x10, 0x02, 0x2a, 0x6b, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x70, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x53, 0x5f, 0x50, 0x49, 0x50, 0x53,
	0x10, 0x02, 0x42, 0x27, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70,
	0x69, 0xaa, 0x02, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41,
	0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_tradeapi_v1_stops_proto_rawDescOnce sync.Once
	file_proto_tradeapi_v1_stops_proto_rawDescData = file_proto_tradeapi_v1_stops_proto_rawDesc
)

func file_proto_tradeapi_v1_stops_proto_rawDescGZIP() []byte {
	file_proto_tradeapi_v1_stops_proto_rawDescOnce.Do(func() {
		file_proto_tradeapi_v1_stops_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tradeapi_v1_stops_proto_rawDescData)
	})
	return file_proto_tradeapi_v1_stops_proto_rawDescData
}

var file_proto_tradeapi_v1_stops_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_tradeapi_v1_stops_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_tradeapi_v1_stops_proto_goTypes = []interface{}{
	(StopStatus)(0),             // 0: proto.tradeapi.v1.StopStatus
	(StopQuantityUnits)(0),      // 1: proto.tradeapi.v1.StopQuantityUnits
	(StopPriceUnits)(0),         // 2: proto.tradeapi.v1.StopPriceUnits
	(*Stop)(nil),                // 3: proto.tradeapi.v1.Stop
	(*StopLoss)(nil),            // 4: proto.tradeapi.v1.StopLoss
	(*TakeProfit)(nil),          // 5: proto.tradeapi.v1.TakeProfit
	(*StopQuantity)(nil),        // 6: proto.tradeapi.v1.StopQuantity
	(*StopPrice)(nil),           // 7: proto.tradeapi.v1.StopPrice
	(*CancelStopRequest)(nil),   // 8: proto.tradeapi.v1.CancelStopRequest
	(*CancelStopResult)(nil),    // 9: proto.tradeapi.v1.CancelStopResult
	(*GetStopsRequest)(nil),     // 10: proto.tradeapi.v1.GetStopsRequest
	(*GetStopsResult)(nil),      // 11: proto.tradeapi.v1.GetStopsResult
	(*NewStopRequest)(nil),      // 12: proto.tradeapi.v1.NewStopRequest
	(*NewStopResult)(nil),       // 13: proto.tradeapi.v1.NewStopResult
	(Market)(0),                 // 14: proto.tradeapi.v1.Market
	(BuySell)(0),                // 15: proto.tradeapi.v1.BuySell
	(*timestamp.Timestamp)(nil), // 16: google.protobuf.Timestamp
	(*OrderValidBefore)(nil),    // 17: proto.tradeapi.v1.OrderValidBefore
}
var file_proto_tradeapi_v1_stops_proto_depIdxs = []int32{
	14, // 0: proto.tradeapi.v1.Stop.market:type_name -> proto.tradeapi.v1.Market
	15, // 1: proto.tradeapi.v1.Stop.buy_sell:type_name -> proto.tradeapi.v1.BuySell
	16, // 2: proto.tradeapi.v1.Stop.expiration_date:type_name -> google.protobuf.Timestamp
	17, // 3: proto.tradeapi.v1.Stop.valid_before:type_name -> proto.tradeapi.v1.OrderValidBefore
	0,  // 4: proto.tradeapi.v1.Stop.status:type_name -> proto.tradeapi.v1.StopStatus
	16, // 5: proto.tradeapi.v1.Stop.accepted_at:type_name -> google.protobuf.Timestamp
	16, // 6: proto.tradeapi.v1.Stop.canceled_at:type_name -> google.protobuf.Timestamp
	4,  // 7: proto.tradeapi.v1.Stop.stop_loss:type_name -> proto.tradeapi.v1.StopLoss
	5,  // 8: proto.tradeapi.v1.Stop.take_profit:type_name -> proto.tradeapi.v1.TakeProfit
	6,  // 9: proto.tradeapi.v1.StopLoss.quantity:type_name -> proto.tradeapi.v1.StopQuantity
	7,  // 10: proto.tradeapi.v1.TakeProfit.correction_price:type_name -> proto.tradeapi.v1.StopPrice
	7,  // 11: proto.tradeapi.v1.TakeProfit.spread_price:type_name -> proto.tradeapi.v1.StopPrice
	6,  // 12: proto.tradeapi.v1.TakeProfit.quantity:type_name -> proto.tradeapi.v1.StopQuantity
	1,  // 13: proto.tradeapi.v1.StopQuantity.units:type_name -> proto.tradeapi.v1.StopQuantityUnits
	2,  // 14: proto.tradeapi.v1.StopPrice.units:type_name -> proto.tradeapi.v1.StopPriceUnits
	3,  // 15: proto.tradeapi.v1.GetStopsResult.stops:type_name -> proto.tradeapi.v1.Stop
	15, // 16: proto.tradeapi.v1.NewStopRequest.buy_sell:type_name -> proto.tradeapi.v1.BuySell
	4,  // 17: proto.tradeapi.v1.NewStopRequest.stop_loss:type_name -> proto.tradeapi.v1.StopLoss
	5,  // 18: proto.tradeapi.v1.NewStopRequest.take_profit:type_name -> proto.tradeapi.v1.TakeProfit
	16, // 19: proto.tradeapi.v1.NewStopRequest.expiration_date:type_name -> google.protobuf.Timestamp
	17, // 20: proto.tradeapi.v1.NewStopRequest.valid_before:type_name -> proto.tradeapi.v1.OrderValidBefore
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_proto_tradeapi_v1_stops_proto_init() }
func file_proto_tradeapi_v1_stops_proto_init() {
	if File_proto_tradeapi_v1_stops_proto != nil {
		return
	}
	file_proto_tradeapi_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_tradeapi_v1_stops_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_stops_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopLoss); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_stops_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeProfit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_stops_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_stops_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_stops_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_stops_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelStopResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_stops_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStopsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_stops_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStopsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_stops_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewStopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_stops_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewStopResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tradeapi_v1_stops_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tradeapi_v1_stops_proto_goTypes,
		DependencyIndexes: file_proto_tradeapi_v1_stops_proto_depIdxs,
		EnumInfos:         file_proto_tradeapi_v1_stops_proto_enumTypes,
		MessageInfos:      file_proto_tradeapi_v1_stops_proto_msgTypes,
	}.Build()
	File_proto_tradeapi_v1_stops_proto = out.File
	file_proto_tradeapi_v1_stops_proto_rawDesc = nil
	file_proto_tradeapi_v1_stops_proto_goTypes = nil
	file_proto_tradeapi_v1_stops_proto_depIdxs = nil
}
