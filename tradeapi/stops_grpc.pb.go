// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: grpc/tradeapi/v1/stops.proto

package tradeapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StopsClient is the client API for Stops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StopsClient interface {
	// Returns the list of Stop Orders.
	// Возвращает список стоп-заявок.
	GetStops(ctx context.Context, in *GetStopsRequest, opts ...grpc.CallOption) (*GetStopsResult, error)
	// Cancels Stop Order.
	// Снимает стоп-заявку.
	CancelStop(ctx context.Context, in *CancelStopRequest, opts ...grpc.CallOption) (*CancelStopResult, error)
	// Creates new Stop Order.
	// Выставляет стоп-заявку.
	NewStop(ctx context.Context, in *NewStopRequest, opts ...grpc.CallOption) (*NewStopResult, error)
}

type stopsClient struct {
	cc grpc.ClientConnInterface
}

func NewStopsClient(cc grpc.ClientConnInterface) StopsClient {
	return &stopsClient{cc}
}

func (c *stopsClient) GetStops(ctx context.Context, in *GetStopsRequest, opts ...grpc.CallOption) (*GetStopsResult, error) {
	out := new(GetStopsResult)
	err := c.cc.Invoke(ctx, "/grpc.tradeapi.v1.Stops/GetStops", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stopsClient) CancelStop(ctx context.Context, in *CancelStopRequest, opts ...grpc.CallOption) (*CancelStopResult, error) {
	out := new(CancelStopResult)
	err := c.cc.Invoke(ctx, "/grpc.tradeapi.v1.Stops/CancelStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stopsClient) NewStop(ctx context.Context, in *NewStopRequest, opts ...grpc.CallOption) (*NewStopResult, error) {
	out := new(NewStopResult)
	err := c.cc.Invoke(ctx, "/grpc.tradeapi.v1.Stops/NewStop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StopsServer is the server API for Stops service.
// All implementations must embed UnimplementedStopsServer
// for forward compatibility
type StopsServer interface {
	// Returns the list of Stop Orders.
	// Возвращает список стоп-заявок.
	GetStops(context.Context, *GetStopsRequest) (*GetStopsResult, error)
	// Cancels Stop Order.
	// Снимает стоп-заявку.
	CancelStop(context.Context, *CancelStopRequest) (*CancelStopResult, error)
	// Creates new Stop Order.
	// Выставляет стоп-заявку.
	NewStop(context.Context, *NewStopRequest) (*NewStopResult, error)
	mustEmbedUnimplementedStopsServer()
}

// UnimplementedStopsServer must be embedded to have forward compatible implementations.
type UnimplementedStopsServer struct {
}

func (UnimplementedStopsServer) GetStops(context.Context, *GetStopsRequest) (*GetStopsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStops not implemented")
}
func (UnimplementedStopsServer) CancelStop(context.Context, *CancelStopRequest) (*CancelStopResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelStop not implemented")
}
func (UnimplementedStopsServer) NewStop(context.Context, *NewStopRequest) (*NewStopResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewStop not implemented")
}
func (UnimplementedStopsServer) mustEmbedUnimplementedStopsServer() {}

// UnsafeStopsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StopsServer will
// result in compilation errors.
type UnsafeStopsServer interface {
	mustEmbedUnimplementedStopsServer()
}

func RegisterStopsServer(s grpc.ServiceRegistrar, srv StopsServer) {
	s.RegisterService(&Stops_ServiceDesc, srv)
}

func _Stops_GetStops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStopsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StopsServer).GetStops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tradeapi.v1.Stops/GetStops",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StopsServer).GetStops(ctx, req.(*GetStopsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stops_CancelStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StopsServer).CancelStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tradeapi.v1.Stops/CancelStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StopsServer).CancelStop(ctx, req.(*CancelStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stops_NewStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewStopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StopsServer).NewStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tradeapi.v1.Stops/NewStop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StopsServer).NewStop(ctx, req.(*NewStopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Stops_ServiceDesc is the grpc.ServiceDesc for Stops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.tradeapi.v1.Stops",
	HandlerType: (*StopsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStops",
			Handler:    _Stops_GetStops_Handler,
		},
		{
			MethodName: "CancelStop",
			Handler:    _Stops_CancelStop_Handler,
		},
		{
			MethodName: "NewStop",
			Handler:    _Stops_NewStop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/tradeapi/v1/stops.proto",
}
