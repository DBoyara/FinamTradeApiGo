// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.6.1
// source: proto/tradeapi/v1/portfolios.proto

package tradeapi

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// What kind of data the response contains.
// Какие данные будут в ответе.
type PortfolioContent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currency positions.
	// Валютные позиции.
	IncludeCurrencies bool `protobuf:"varint,1,opt,name=include_currencies,json=includeCurrencies,proto3" json:"include_currencies,omitempty"`
	// Money positions.
	// Денежные позиции.
	IncludeMoney bool `protobuf:"varint,2,opt,name=include_money,json=includeMoney,proto3" json:"include_money,omitempty"`
	// DEPO positions.
	// Позиции DEPO.
	IncludePositions bool `protobuf:"varint,3,opt,name=include_positions,json=includePositions,proto3" json:"include_positions,omitempty"`
	// Buy and Sell limits.
	// Лимиты покупки и продажи.
	IncludeMaxBuySell bool `protobuf:"varint,4,opt,name=include_max_buy_sell,json=includeMaxBuySell,proto3" json:"include_max_buy_sell,omitempty"`
}

func (x *PortfolioContent) Reset() {
	*x = PortfolioContent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_portfolios_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortfolioContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortfolioContent) ProtoMessage() {}

func (x *PortfolioContent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_portfolios_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortfolioContent.ProtoReflect.Descriptor instead.
func (*PortfolioContent) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_portfolios_proto_rawDescGZIP(), []int{0}
}

func (x *PortfolioContent) GetIncludeCurrencies() bool {
	if x != nil {
		return x.IncludeCurrencies
	}
	return false
}

func (x *PortfolioContent) GetIncludeMoney() bool {
	if x != nil {
		return x.IncludeMoney
	}
	return false
}

func (x *PortfolioContent) GetIncludePositions() bool {
	if x != nil {
		return x.IncludePositions
	}
	return false
}

func (x *PortfolioContent) GetIncludeMaxBuySell() bool {
	if x != nil {
		return x.IncludeMaxBuySell
	}
	return false
}

// DEPO position.
// Позиция DEPO.
type PositionRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Security Code.
	// Тикер инструмента.
	SecurityCode string `protobuf:"bytes,1,opt,name=security_code,json=securityCode,proto3" json:"security_code,omitempty"`
	// Security market.
	// Рынок инструмента.
	Market Market `protobuf:"varint,2,opt,name=market,proto3,enum=proto.tradeapi.v1.Market" json:"market,omitempty"`
	// Current position, items.
	// Текущая позиция, шт.
	Balance int64 `protobuf:"varint,3,opt,name=balance,proto3" json:"balance,omitempty"`
	// Current price in price_currency.
	// Текущая цена в валюте цены инструмента.
	CurrentPrice float64 `protobuf:"fixed64,4,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`
	// Positions equity.
	// Оценка позиции по инструменту в валюте риска.
	Equity float64 `protobuf:"fixed64,5,opt,name=equity,proto3" json:"equity,omitempty"`
	// Balanced price of security in price_currency.
	// Балансовая цена в валюте цены инструмента.
	AveragePrice float64 `protobuf:"fixed64,6,opt,name=average_price,json=averagePrice,proto3" json:"average_price,omitempty"`
	// Risk currency.
	// Валюта риска.
	Currency string `protobuf:"bytes,7,opt,name=currency,proto3" json:"currency,omitempty"`
	// P/L for initial position, in risk currency.
	// Прибыль/убыток по входящей позиции, в валюте риска.
	AccumulatedProfit float64 `protobuf:"fixed64,8,opt,name=accumulated_profit,json=accumulatedProfit,proto3" json:"accumulated_profit,omitempty"`
	// Daily P/L, in risk currency.
	// Прибыль/убыток по сделкам за день, в валюте риска.
	TodayProfit float64 `protobuf:"fixed64,9,opt,name=today_profit,json=todayProfit,proto3" json:"today_profit,omitempty"`
	// Unrealized P/L, in average_price_currency.
	// Нереализованные прибыль/убытки по балансовой цене в валюте инструмента.
	UnrealizedProfit float64 `protobuf:"fixed64,10,opt,name=unrealized_profit,json=unrealizedProfit,proto3" json:"unrealized_profit,omitempty"`
	// P/L in price_currency.
	// Прибыль/убытки в валюте цены инструмента.
	Profit float64 `protobuf:"fixed64,11,opt,name=profit,proto3" json:"profit,omitempty"`
	// Max lots to buy.
	// Максимальное кол-во лотов, доступных для покупки.
	MaxBuy int64 `protobuf:"varint,12,opt,name=max_buy,json=maxBuy,proto3" json:"max_buy,omitempty"`
	// Max lots to sell.
	// Максимальное кол-во лотов, доступных для продажи.
	MaxSell int64 `protobuf:"varint,13,opt,name=max_sell,json=maxSell,proto3" json:"max_sell,omitempty"`
	// Security price currency.
	// Валюта цены инструмента.
	PriceCurrency string `protobuf:"bytes,14,opt,name=price_currency,json=priceCurrency,proto3" json:"price_currency,omitempty"`
	// Balanced price currency.
	// Валюта балансовой цены.
	AveragePriceCurrency string `protobuf:"bytes,15,opt,name=average_price_currency,json=averagePriceCurrency,proto3" json:"average_price_currency,omitempty"`
	// Risk Currency to Price currency Cross rate.
	// Кросс-курс валюты балансовой цены к валюте риска.
	AverageRate float64 `protobuf:"fixed64,16,opt,name=average_rate,json=averageRate,proto3" json:"average_rate,omitempty"`
}

func (x *PositionRow) Reset() {
	*x = PositionRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_portfolios_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositionRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositionRow) ProtoMessage() {}

func (x *PositionRow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_portfolios_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositionRow.ProtoReflect.Descriptor instead.
func (*PositionRow) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_portfolios_proto_rawDescGZIP(), []int{1}
}

func (x *PositionRow) GetSecurityCode() string {
	if x != nil {
		return x.SecurityCode
	}
	return ""
}

func (x *PositionRow) GetMarket() Market {
	if x != nil {
		return x.Market
	}
	return Market_MARKET_UNSPECIFIED
}

func (x *PositionRow) GetBalance() int64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *PositionRow) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *PositionRow) GetEquity() float64 {
	if x != nil {
		return x.Equity
	}
	return 0
}

func (x *PositionRow) GetAveragePrice() float64 {
	if x != nil {
		return x.AveragePrice
	}
	return 0
}

func (x *PositionRow) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PositionRow) GetAccumulatedProfit() float64 {
	if x != nil {
		return x.AccumulatedProfit
	}
	return 0
}

func (x *PositionRow) GetTodayProfit() float64 {
	if x != nil {
		return x.TodayProfit
	}
	return 0
}

func (x *PositionRow) GetUnrealizedProfit() float64 {
	if x != nil {
		return x.UnrealizedProfit
	}
	return 0
}

func (x *PositionRow) GetProfit() float64 {
	if x != nil {
		return x.Profit
	}
	return 0
}

func (x *PositionRow) GetMaxBuy() int64 {
	if x != nil {
		return x.MaxBuy
	}
	return 0
}

func (x *PositionRow) GetMaxSell() int64 {
	if x != nil {
		return x.MaxSell
	}
	return 0
}

func (x *PositionRow) GetPriceCurrency() string {
	if x != nil {
		return x.PriceCurrency
	}
	return ""
}

func (x *PositionRow) GetAveragePriceCurrency() string {
	if x != nil {
		return x.AveragePriceCurrency
	}
	return ""
}

func (x *PositionRow) GetAverageRate() float64 {
	if x != nil {
		return x.AverageRate
	}
	return 0
}

// Currency position.
// Валютная позиция.
type CurrencyRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currency code.
	// Код валюты.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Current position.
	// Текущая позиция.
	Balance float64 `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`
	// Currency rate for RUB.
	// Курс валюты к рублю.
	CrossRate float64 `protobuf:"fixed64,3,opt,name=cross_rate,json=crossRate,proto3" json:"cross_rate,omitempty"`
	// Equity in RUB.
	// Оценка в рублях.
	Equity float64 `protobuf:"fixed64,4,opt,name=equity,proto3" json:"equity,omitempty"`
	// Unrealized P/L, in RUB.
	// Нереализованные прибыль/убытки в рублях.
	UnrealizedProfit float64 `protobuf:"fixed64,5,opt,name=unrealized_profit,json=unrealizedProfit,proto3" json:"unrealized_profit,omitempty"`
}

func (x *CurrencyRow) Reset() {
	*x = CurrencyRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_portfolios_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyRow) ProtoMessage() {}

func (x *CurrencyRow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_portfolios_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyRow.ProtoReflect.Descriptor instead.
func (*CurrencyRow) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_portfolios_proto_rawDescGZIP(), []int{2}
}

func (x *CurrencyRow) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CurrencyRow) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *CurrencyRow) GetCrossRate() float64 {
	if x != nil {
		return x.CrossRate
	}
	return 0
}

func (x *CurrencyRow) GetEquity() float64 {
	if x != nil {
		return x.Equity
	}
	return 0
}

func (x *CurrencyRow) GetUnrealizedProfit() float64 {
	if x != nil {
		return x.UnrealizedProfit
	}
	return 0
}

// Money position.
// Денежная позиция.
type MoneyRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position market.
	// Рынок позиции.
	Market Market `protobuf:"varint,1,opt,name=market,proto3,enum=proto.tradeapi.v1.Market" json:"market,omitempty"`
	// Currency code.
	// Код валюты.
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	// Current position.
	// Текущая позиция.
	Balance float64 `protobuf:"fixed64,3,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *MoneyRow) Reset() {
	*x = MoneyRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_portfolios_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyRow) ProtoMessage() {}

func (x *MoneyRow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_portfolios_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyRow.ProtoReflect.Descriptor instead.
func (*MoneyRow) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_portfolios_proto_rawDescGZIP(), []int{3}
}

func (x *MoneyRow) GetMarket() Market {
	if x != nil {
		return x.Market
	}
	return Market_MARKET_UNSPECIFIED
}

func (x *MoneyRow) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *MoneyRow) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

// Get Portfolio Request.
// Запрос портфеля.
type GetPortfolioRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// What data to return by request.
	// Какие данные возвращать в ответе.
	Content *PortfolioContent `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *GetPortfolioRequest) Reset() {
	*x = GetPortfolioRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_portfolios_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortfolioRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortfolioRequest) ProtoMessage() {}

func (x *GetPortfolioRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_portfolios_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortfolioRequest.ProtoReflect.Descriptor instead.
func (*GetPortfolioRequest) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_portfolios_proto_rawDescGZIP(), []int{4}
}

func (x *GetPortfolioRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetPortfolioRequest) GetContent() *PortfolioContent {
	if x != nil {
		return x.Content
	}
	return nil
}

// GetPortfolioRequest result.
// Результат GetPortfolioRequest.
type GetPortfolioResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Trade Account ID.
	// Идентификатор торгового счёта.
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// What kind of data the response contains.
	// Какие данные будут в ответе.
	Content *PortfolioContent `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	// Current equity, RUB.
	// Текущая оценка портфеля в рублях.
	Equity float64 `protobuf:"fixed64,3,opt,name=equity,proto3" json:"equity,omitempty"`
	// Open Equity, RUB.
	// Входящая оценка портфеля в рублях.
	Balance float64 `protobuf:"fixed64,4,opt,name=balance,proto3" json:"balance,omitempty"`
	// DEPO positions.
	// Позиции DEPO.
	Positions []*PositionRow `protobuf:"bytes,5,rep,name=positions,proto3" json:"positions,omitempty"`
	// Currency positions.
	// Валютные позиции.
	Currencies []*CurrencyRow `protobuf:"bytes,6,rep,name=currencies,proto3" json:"currencies,omitempty"`
	// Money positions.
	// Денежные позиции.
	Money []*MoneyRow `protobuf:"bytes,7,rep,name=money,proto3" json:"money,omitempty"`
}

func (x *GetPortfolioResult) Reset() {
	*x = GetPortfolioResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_tradeapi_v1_portfolios_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPortfolioResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPortfolioResult) ProtoMessage() {}

func (x *GetPortfolioResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_tradeapi_v1_portfolios_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPortfolioResult.ProtoReflect.Descriptor instead.
func (*GetPortfolioResult) Descriptor() ([]byte, []int) {
	return file_proto_tradeapi_v1_portfolios_proto_rawDescGZIP(), []int{5}
}

func (x *GetPortfolioResult) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetPortfolioResult) GetContent() *PortfolioContent {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *GetPortfolioResult) GetEquity() float64 {
	if x != nil {
		return x.Equity
	}
	return 0
}

func (x *GetPortfolioResult) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *GetPortfolioResult) GetPositions() []*PositionRow {
	if x != nil {
		return x.Positions
	}
	return nil
}

func (x *GetPortfolioResult) GetCurrencies() []*CurrencyRow {
	if x != nil {
		return x.Currencies
	}
	return nil
}

func (x *GetPortfolioResult) GetMoney() []*MoneyRow {
	if x != nil {
		return x.Money
	}
	return nil
}

var File_proto_tradeapi_v1_portfolios_proto protoreflect.FileDescriptor

var file_proto_tradeapi_v1_portfolios_proto_rawDesc = []byte{
	0x0a, 0x22, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x72, 0x74,
	0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x0a,
	0x14, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x79,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x53, 0x65, 0x6c, 0x6c, 0x22, 0xc8,
	0x04, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2d,
	0x0a, 0x12, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x61, 0x63, 0x63, 0x75,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x12, 0x19,
	0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x34, 0x0a, 0x16, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0b, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x6f, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x73, 0x73,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x2b,
	0x0a, 0x11, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x75, 0x6e, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0x73, 0x0a, 0x08, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x52, 0x6f, 0x77, 0x12, 0x31, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x71, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x66, 0x6f,
	0x6c, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0xd3, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x66,
	0x6f, 0x6c, 0x69, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x66, 0x6f, 0x6c, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x65, 0x71, 0x75, 0x69, 0x74, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x77, 0x52, 0x09, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x6f, 0x77, 0x52, 0x0a, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52,
	0x6f, 0x77, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x42, 0x27, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x61, 0x70, 0x69, 0xaa, 0x02, 0x17, 0x46, 0x69, 0x6e, 0x61, 0x6d,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_tradeapi_v1_portfolios_proto_rawDescOnce sync.Once
	file_proto_tradeapi_v1_portfolios_proto_rawDescData = file_proto_tradeapi_v1_portfolios_proto_rawDesc
)

func file_proto_tradeapi_v1_portfolios_proto_rawDescGZIP() []byte {
	file_proto_tradeapi_v1_portfolios_proto_rawDescOnce.Do(func() {
		file_proto_tradeapi_v1_portfolios_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_tradeapi_v1_portfolios_proto_rawDescData)
	})
	return file_proto_tradeapi_v1_portfolios_proto_rawDescData
}

var file_proto_tradeapi_v1_portfolios_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_tradeapi_v1_portfolios_proto_goTypes = []interface{}{
	(*PortfolioContent)(nil),    // 0: proto.tradeapi.v1.PortfolioContent
	(*PositionRow)(nil),         // 1: proto.tradeapi.v1.PositionRow
	(*CurrencyRow)(nil),         // 2: proto.tradeapi.v1.CurrencyRow
	(*MoneyRow)(nil),            // 3: proto.tradeapi.v1.MoneyRow
	(*GetPortfolioRequest)(nil), // 4: proto.tradeapi.v1.GetPortfolioRequest
	(*GetPortfolioResult)(nil),  // 5: proto.tradeapi.v1.GetPortfolioResult
	(Market)(0),                 // 6: proto.tradeapi.v1.Market
}
var file_proto_tradeapi_v1_portfolios_proto_depIdxs = []int32{
	6, // 0: proto.tradeapi.v1.PositionRow.market:type_name -> proto.tradeapi.v1.Market
	6, // 1: proto.tradeapi.v1.MoneyRow.market:type_name -> proto.tradeapi.v1.Market
	0, // 2: proto.tradeapi.v1.GetPortfolioRequest.content:type_name -> proto.tradeapi.v1.PortfolioContent
	0, // 3: proto.tradeapi.v1.GetPortfolioResult.content:type_name -> proto.tradeapi.v1.PortfolioContent
	1, // 4: proto.tradeapi.v1.GetPortfolioResult.positions:type_name -> proto.tradeapi.v1.PositionRow
	2, // 5: proto.tradeapi.v1.GetPortfolioResult.currencies:type_name -> proto.tradeapi.v1.CurrencyRow
	3, // 6: proto.tradeapi.v1.GetPortfolioResult.money:type_name -> proto.tradeapi.v1.MoneyRow
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_proto_tradeapi_v1_portfolios_proto_init() }
func file_proto_tradeapi_v1_portfolios_proto_init() {
	if File_proto_tradeapi_v1_portfolios_proto != nil {
		return
	}
	file_proto_tradeapi_v1_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_tradeapi_v1_portfolios_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortfolioContent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_portfolios_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositionRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_portfolios_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_portfolios_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_portfolios_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortfolioRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_tradeapi_v1_portfolios_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPortfolioResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_tradeapi_v1_portfolios_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_tradeapi_v1_portfolios_proto_goTypes,
		DependencyIndexes: file_proto_tradeapi_v1_portfolios_proto_depIdxs,
		MessageInfos:      file_proto_tradeapi_v1_portfolios_proto_msgTypes,
	}.Build()
	File_proto_tradeapi_v1_portfolios_proto = out.File
	file_proto_tradeapi_v1_portfolios_proto_rawDesc = nil
	file_proto_tradeapi_v1_portfolios_proto_goTypes = nil
	file_proto_tradeapi_v1_portfolios_proto_depIdxs = nil
}
