// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: grpc/tradeapi/v1/portfolios.proto

package tradeapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Portfolios_GetPortfolio_FullMethodName = "/grpc.tradeapi.v1.Portfolios/GetPortfolio"
)

// PortfoliosClient is the client API for Portfolios service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortfoliosClient interface {
	// Returns portfolio.
	// Возвращает портфель.
	GetPortfolio(ctx context.Context, in *GetPortfolioRequest, opts ...grpc.CallOption) (*GetPortfolioResult, error)
}

type portfoliosClient struct {
	cc grpc.ClientConnInterface
}

func NewPortfoliosClient(cc grpc.ClientConnInterface) PortfoliosClient {
	return &portfoliosClient{cc}
}

func (c *portfoliosClient) GetPortfolio(ctx context.Context, in *GetPortfolioRequest, opts ...grpc.CallOption) (*GetPortfolioResult, error) {
	out := new(GetPortfolioResult)
	err := c.cc.Invoke(ctx, Portfolios_GetPortfolio_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortfoliosServer is the server API for Portfolios service.
// All implementations must embed UnimplementedPortfoliosServer
// for forward compatibility
type PortfoliosServer interface {
	// Returns portfolio.
	// Возвращает портфель.
	GetPortfolio(context.Context, *GetPortfolioRequest) (*GetPortfolioResult, error)
	mustEmbedUnimplementedPortfoliosServer()
}

// UnimplementedPortfoliosServer must be embedded to have forward compatible implementations.
type UnimplementedPortfoliosServer struct {
}

func (UnimplementedPortfoliosServer) GetPortfolio(context.Context, *GetPortfolioRequest) (*GetPortfolioResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPortfolio not implemented")
}
func (UnimplementedPortfoliosServer) mustEmbedUnimplementedPortfoliosServer() {}

// UnsafePortfoliosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortfoliosServer will
// result in compilation errors.
type UnsafePortfoliosServer interface {
	mustEmbedUnimplementedPortfoliosServer()
}

func RegisterPortfoliosServer(s grpc.ServiceRegistrar, srv PortfoliosServer) {
	s.RegisterService(&Portfolios_ServiceDesc, srv)
}

func _Portfolios_GetPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPortfolioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortfoliosServer).GetPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Portfolios_GetPortfolio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortfoliosServer).GetPortfolio(ctx, req.(*GetPortfolioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Portfolios_ServiceDesc is the grpc.ServiceDesc for Portfolios service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Portfolios_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.tradeapi.v1.Portfolios",
	HandlerType: (*PortfoliosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPortfolio",
			Handler:    _Portfolios_GetPortfolio_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/tradeapi/v1/portfolios.proto",
}
